/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace I1inchAggregationRouterV6 {
  export type SwapDescriptionStruct = {
    srcToken: string;
    dstToken: string;
    srcReceiver: string;
    dstReceiver: string;
    amount: BigNumberish;
    minReturnAmount: BigNumberish;
    flags: BigNumberish;
  };

  export type SwapDescriptionStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    srcToken: string;
    dstToken: string;
    srcReceiver: string;
    dstReceiver: string;
    amount: BigNumber;
    minReturnAmount: BigNumber;
    flags: BigNumber;
  };
}

export interface I1inchAggregationRouterV6Interface extends utils.Interface {
  contractName: "I1inchAggregationRouterV6";
  functions: {
    "swap(address,(address,address,address,address,uint256,uint256,uint256),bytes)": FunctionFragment;
    "unoswapTo(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "unoswapTo2(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "unoswapTo3(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "swap",
    values: [string, I1inchAggregationRouterV6.SwapDescriptionStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unoswapTo",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unoswapTo2",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unoswapTo3",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unoswapTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unoswapTo2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unoswapTo3", data: BytesLike): Result;

  events: {};
}

export interface I1inchAggregationRouterV6 extends BaseContract {
  contractName: "I1inchAggregationRouterV6";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: I1inchAggregationRouterV6Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    swap(
      executor: string,
      desc: I1inchAggregationRouterV6.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unoswapTo(
      to: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      dex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unoswapTo2(
      to: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      dex: BigNumberish,
      dex2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unoswapTo3(
      to: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      dex: BigNumberish,
      dex2: BigNumberish,
      dex3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  swap(
    executor: string,
    desc: I1inchAggregationRouterV6.SwapDescriptionStruct,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unoswapTo(
    to: BigNumberish,
    token: BigNumberish,
    amount: BigNumberish,
    minReturn: BigNumberish,
    dex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unoswapTo2(
    to: BigNumberish,
    token: BigNumberish,
    amount: BigNumberish,
    minReturn: BigNumberish,
    dex: BigNumberish,
    dex2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unoswapTo3(
    to: BigNumberish,
    token: BigNumberish,
    amount: BigNumberish,
    minReturn: BigNumberish,
    dex: BigNumberish,
    dex2: BigNumberish,
    dex3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    swap(
      executor: string,
      desc: I1inchAggregationRouterV6.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        returnAmount: BigNumber;
        spentAmount: BigNumber;
      }
    >;

    unoswapTo(
      to: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      dex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unoswapTo2(
      to: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      dex: BigNumberish,
      dex2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unoswapTo3(
      to: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      dex: BigNumberish,
      dex2: BigNumberish,
      dex3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    swap(
      executor: string,
      desc: I1inchAggregationRouterV6.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unoswapTo(
      to: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      dex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unoswapTo2(
      to: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      dex: BigNumberish,
      dex2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unoswapTo3(
      to: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      dex: BigNumberish,
      dex2: BigNumberish,
      dex3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    swap(
      executor: string,
      desc: I1inchAggregationRouterV6.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unoswapTo(
      to: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      dex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unoswapTo2(
      to: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      dex: BigNumberish,
      dex2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unoswapTo3(
      to: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      dex: BigNumberish,
      dex2: BigNumberish,
      dex3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
