/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IPActionInfoStatic {
  export type TokenAmountStruct = { token: string; amount: BigNumberish };

  export type TokenAmountStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type UserMarketInfoStruct = {
    lpBalance: IPActionInfoStatic.TokenAmountStruct;
    ptBalance: IPActionInfoStatic.TokenAmountStruct;
    syBalance: IPActionInfoStatic.TokenAmountStruct;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStruct[];
  };

  export type UserMarketInfoStructOutput = [
    IPActionInfoStatic.TokenAmountStructOutput,
    IPActionInfoStatic.TokenAmountStructOutput,
    IPActionInfoStatic.TokenAmountStructOutput,
    IPActionInfoStatic.TokenAmountStructOutput[]
  ] & {
    lpBalance: IPActionInfoStatic.TokenAmountStructOutput;
    ptBalance: IPActionInfoStatic.TokenAmountStructOutput;
    syBalance: IPActionInfoStatic.TokenAmountStructOutput;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStructOutput[];
  };

  export type UserPYInfoStruct = {
    ptBalance: IPActionInfoStatic.TokenAmountStruct;
    ytBalance: IPActionInfoStatic.TokenAmountStruct;
    unclaimedInterest: IPActionInfoStatic.TokenAmountStruct;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStruct[];
  };

  export type UserPYInfoStructOutput = [
    IPActionInfoStatic.TokenAmountStructOutput,
    IPActionInfoStatic.TokenAmountStructOutput,
    IPActionInfoStatic.TokenAmountStructOutput,
    IPActionInfoStatic.TokenAmountStructOutput[]
  ] & {
    ptBalance: IPActionInfoStatic.TokenAmountStructOutput;
    ytBalance: IPActionInfoStatic.TokenAmountStructOutput;
    unclaimedInterest: IPActionInfoStatic.TokenAmountStructOutput;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStructOutput[];
  };

  export type UserSYInfoStruct = {
    syBalance: IPActionInfoStatic.TokenAmountStruct;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStruct[];
  };

  export type UserSYInfoStructOutput = [
    IPActionInfoStatic.TokenAmountStructOutput,
    IPActionInfoStatic.TokenAmountStructOutput[]
  ] & {
    syBalance: IPActionInfoStatic.TokenAmountStructOutput;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStructOutput[];
  };
}

export interface ActionInfoStaticInterface extends utils.Interface {
  contractName: "ActionInfoStatic";
  functions: {
    "getPY(address)": FunctionFragment;
    "getTokensInOut(address)": FunctionFragment;
    "getUserMarketInfo(address,address)": FunctionFragment;
    "getUserPYInfo(address,address)": FunctionFragment;
    "getUserSYInfo(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getPY", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTokensInOut",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMarketInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPYInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSYInfo",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "getPY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokensInOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPYInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSYInfo",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ActionInfoStatic extends BaseContract {
  contractName: "ActionInfoStatic";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ActionInfoStaticInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPY(
      py: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { pt: string; yt: string }>;

    getTokensInOut(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { tokensIn: string[]; tokensOut: string[] }
    >;

    getUserMarketInfo(
      market: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserPYInfo(
      py: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserSYInfo(
      sy: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getPY(
    py: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { pt: string; yt: string }>;

  getTokensInOut(
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[]] & { tokensIn: string[]; tokensOut: string[] }
  >;

  getUserMarketInfo(
    market: string,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserPYInfo(
    py: string,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserSYInfo(
    sy: string,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getPY(
      py: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { pt: string; yt: string }>;

    getTokensInOut(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { tokensIn: string[]; tokensOut: string[] }
    >;

    getUserMarketInfo(
      market: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<IPActionInfoStatic.UserMarketInfoStructOutput>;

    getUserPYInfo(
      py: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<IPActionInfoStatic.UserPYInfoStructOutput>;

    getUserSYInfo(
      sy: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<IPActionInfoStatic.UserSYInfoStructOutput>;
  };

  filters: {};

  estimateGas: {
    getPY(py: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokensInOut(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserMarketInfo(
      market: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserPYInfo(
      py: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserSYInfo(
      sy: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPY(py: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokensInOut(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserMarketInfo(
      market: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserPYInfo(
      py: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserSYInfo(
      sy: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
