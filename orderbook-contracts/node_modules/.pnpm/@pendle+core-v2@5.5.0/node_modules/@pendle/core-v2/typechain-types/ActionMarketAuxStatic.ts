/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type ApproxParamsStruct = {
  guessMin: BigNumberish;
  guessMax: BigNumberish;
  guessOffchain: BigNumberish;
  maxIteration: BigNumberish;
  eps: BigNumberish;
};

export type ApproxParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  guessMin: BigNumber;
  guessMax: BigNumber;
  guessOffchain: BigNumber;
  maxIteration: BigNumber;
  eps: BigNumber;
};

export type MarketStateStruct = {
  totalPt: BigNumberish;
  totalSy: BigNumberish;
  totalLp: BigNumberish;
  treasury: string;
  scalarRoot: BigNumberish;
  expiry: BigNumberish;
  lnFeeRateRoot: BigNumberish;
  reserveFeePercent: BigNumberish;
  lastLnImpliedRate: BigNumberish;
};

export type MarketStateStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  totalPt: BigNumber;
  totalSy: BigNumber;
  totalLp: BigNumber;
  treasury: string;
  scalarRoot: BigNumber;
  expiry: BigNumber;
  lnFeeRateRoot: BigNumber;
  reserveFeePercent: BigNumber;
  lastLnImpliedRate: BigNumber;
};

export interface ActionMarketAuxStaticInterface extends utils.Interface {
  contractName: "ActionMarketAuxStatic";
  functions: {
    "calcPriceImpactPY(address,int256)": FunctionFragment;
    "calcPriceImpactPt(address,int256)": FunctionFragment;
    "calcPriceImpactYt(address,int256)": FunctionFragment;
    "genApproxParamsToSwapExactSyForPt(address,uint256,uint256)": FunctionFragment;
    "getLpToAssetRate(address)": FunctionFragment;
    "getLpToSyRate(address)": FunctionFragment;
    "getMarketState(address)": FunctionFragment;
    "getPtToAssetRate(address)": FunctionFragment;
    "getPtToSyRate(address)": FunctionFragment;
    "getTradeExchangeRateExcludeFee(address,(int256,int256,int256,address,int256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "getTradeExchangeRateIncludeFee(address,int256)": FunctionFragment;
    "getYieldTokenAndPtRate(address)": FunctionFragment;
    "getYieldTokenAndYtRate(address)": FunctionFragment;
    "getYtToAssetRate(address)": FunctionFragment;
    "getYtToSyRate(address)": FunctionFragment;
    "swapExactSyForPtStaticAndGenerateApproxParams(address,uint256,uint256)": FunctionFragment;
    "swapExactTokenForPtStaticAndGenerateApproxParams(address,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calcPriceImpactPY",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPriceImpactPt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPriceImpactYt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "genApproxParamsToSwapExactSyForPt",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpToAssetRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpToSyRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPtToAssetRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPtToSyRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeExchangeRateExcludeFee",
    values: [string, MarketStateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeExchangeRateIncludeFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldTokenAndPtRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldTokenAndYtRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getYtToAssetRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getYtToSyRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactSyForPtStaticAndGenerateApproxParams",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForPtStaticAndGenerateApproxParams",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcPriceImpactPY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPriceImpactPt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPriceImpactYt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genApproxParamsToSwapExactSyForPt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpToAssetRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpToSyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPtToAssetRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPtToSyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeExchangeRateExcludeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeExchangeRateIncludeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldTokenAndPtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldTokenAndYtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYtToAssetRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYtToSyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactSyForPtStaticAndGenerateApproxParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForPtStaticAndGenerateApproxParams",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ActionMarketAuxStatic extends BaseContract {
  contractName: "ActionMarketAuxStatic";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ActionMarketAuxStaticInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calcPriceImpactPY(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { priceImpact: BigNumber }>;

    calcPriceImpactPt(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { priceImpact: BigNumber }>;

    calcPriceImpactYt(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { priceImpact: BigNumber }>;

    genApproxParamsToSwapExactSyForPt(
      market: string,
      netPtOut: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ApproxParamsStructOutput]>;

    getLpToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLpToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarketState(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        MarketStateStructOutput
      ] & {
        pt: string;
        yt: string;
        sy: string;
        impliedYield: BigNumber;
        marketExchangeRateExcludeFee: BigNumber;
        state: MarketStateStructOutput;
      }
    >;

    getPtToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPtToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTradeExchangeRateExcludeFee(
      market: string,
      state: MarketStateStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTradeExchangeRateIncludeFee(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getYieldTokenAndPtRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        yieldToken: string;
        netPtOut: BigNumber;
        netYieldTokenOut: BigNumber;
      }
    >;

    getYieldTokenAndYtRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        yieldToken: string;
        netYtOut: BigNumber;
        netYieldTokenOut: BigNumber;
      }
    >;

    getYtToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getYtToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swapExactSyForPtStaticAndGenerateApproxParams(
      market: string,
      exactSyIn: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, ApproxParamsStructOutput] & {
        netPtOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        approxParams: ApproxParamsStructOutput;
      }
    >;

    swapExactTokenForPtStaticAndGenerateApproxParams(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ApproxParamsStructOutput
      ] & {
        netPtOut: BigNumber;
        netSyMinted: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        approxParams: ApproxParamsStructOutput;
      }
    >;
  };

  calcPriceImpactPY(
    market: string,
    netPtOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcPriceImpactPt(
    market: string,
    netPtOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcPriceImpactYt(
    market: string,
    netPtOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  genApproxParamsToSwapExactSyForPt(
    market: string,
    netPtOut: BigNumberish,
    slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ApproxParamsStructOutput>;

  getLpToAssetRate(
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLpToSyRate(market: string, overrides?: CallOverrides): Promise<BigNumber>;

  getMarketState(
    market: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, MarketStateStructOutput] & {
      pt: string;
      yt: string;
      sy: string;
      impliedYield: BigNumber;
      marketExchangeRateExcludeFee: BigNumber;
      state: MarketStateStructOutput;
    }
  >;

  getPtToAssetRate(
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPtToSyRate(market: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTradeExchangeRateExcludeFee(
    market: string,
    state: MarketStateStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradeExchangeRateIncludeFee(
    market: string,
    netPtOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getYieldTokenAndPtRate(
    market: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      yieldToken: string;
      netPtOut: BigNumber;
      netYieldTokenOut: BigNumber;
    }
  >;

  getYieldTokenAndYtRate(
    market: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      yieldToken: string;
      netYtOut: BigNumber;
      netYieldTokenOut: BigNumber;
    }
  >;

  getYtToAssetRate(
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getYtToSyRate(market: string, overrides?: CallOverrides): Promise<BigNumber>;

  swapExactSyForPtStaticAndGenerateApproxParams(
    market: string,
    exactSyIn: BigNumberish,
    slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, ApproxParamsStructOutput] & {
      netPtOut: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      approxParams: ApproxParamsStructOutput;
    }
  >;

  swapExactTokenForPtStaticAndGenerateApproxParams(
    market: string,
    tokenIn: string,
    amountTokenIn: BigNumberish,
    slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      ApproxParamsStructOutput
    ] & {
      netPtOut: BigNumber;
      netSyMinted: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      approxParams: ApproxParamsStructOutput;
    }
  >;

  callStatic: {
    calcPriceImpactPY(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPriceImpactPt(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPriceImpactYt(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genApproxParamsToSwapExactSyForPt(
      market: string,
      netPtOut: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ApproxParamsStructOutput>;

    getLpToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketState(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        MarketStateStructOutput
      ] & {
        pt: string;
        yt: string;
        sy: string;
        impliedYield: BigNumber;
        marketExchangeRateExcludeFee: BigNumber;
        state: MarketStateStructOutput;
      }
    >;

    getPtToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPtToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeExchangeRateExcludeFee(
      market: string,
      state: MarketStateStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeExchangeRateIncludeFee(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYieldTokenAndPtRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        yieldToken: string;
        netPtOut: BigNumber;
        netYieldTokenOut: BigNumber;
      }
    >;

    getYieldTokenAndYtRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        yieldToken: string;
        netYtOut: BigNumber;
        netYieldTokenOut: BigNumber;
      }
    >;

    getYtToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYtToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactSyForPtStaticAndGenerateApproxParams(
      market: string,
      exactSyIn: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, ApproxParamsStructOutput] & {
        netPtOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        approxParams: ApproxParamsStructOutput;
      }
    >;

    swapExactTokenForPtStaticAndGenerateApproxParams(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ApproxParamsStructOutput
      ] & {
        netPtOut: BigNumber;
        netSyMinted: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        approxParams: ApproxParamsStructOutput;
      }
    >;
  };

  filters: {};

  estimateGas: {
    calcPriceImpactPY(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPriceImpactPt(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPriceImpactYt(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genApproxParamsToSwapExactSyForPt(
      market: string,
      netPtOut: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketState(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPtToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPtToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeExchangeRateExcludeFee(
      market: string,
      state: MarketStateStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeExchangeRateIncludeFee(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYieldTokenAndPtRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYieldTokenAndYtRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYtToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYtToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactSyForPtStaticAndGenerateApproxParams(
      market: string,
      exactSyIn: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactTokenForPtStaticAndGenerateApproxParams(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcPriceImpactPY(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPriceImpactPt(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPriceImpactYt(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genApproxParamsToSwapExactSyForPt(
      market: string,
      netPtOut: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLpToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLpToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketState(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPtToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPtToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeExchangeRateExcludeFee(
      market: string,
      state: MarketStateStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeExchangeRateIncludeFee(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYieldTokenAndPtRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYieldTokenAndYtRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYtToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYtToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactSyForPtStaticAndGenerateApproxParams(
      market: string,
      exactSyIn: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactTokenForPtStaticAndGenerateApproxParams(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
