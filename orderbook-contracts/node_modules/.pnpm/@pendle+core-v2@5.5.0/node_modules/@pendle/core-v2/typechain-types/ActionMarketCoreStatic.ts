/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type MarketStateStruct = {
  totalPt: BigNumberish;
  totalSy: BigNumberish;
  totalLp: BigNumberish;
  treasury: string;
  scalarRoot: BigNumberish;
  expiry: BigNumberish;
  lnFeeRateRoot: BigNumberish;
  reserveFeePercent: BigNumberish;
  lastLnImpliedRate: BigNumberish;
};

export type MarketStateStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  totalPt: BigNumber;
  totalSy: BigNumber;
  totalLp: BigNumber;
  treasury: string;
  scalarRoot: BigNumber;
  expiry: BigNumber;
  lnFeeRateRoot: BigNumber;
  reserveFeePercent: BigNumber;
  lastLnImpliedRate: BigNumber;
};

export interface ActionMarketCoreStaticInterface extends utils.Interface {
  contractName: "ActionMarketCoreStatic";
  functions: {
    "addLiquidityDualSyAndPtStatic(address,uint256,uint256)": FunctionFragment;
    "addLiquidityDualTokenAndPtStatic(address,address,uint256,uint256)": FunctionFragment;
    "addLiquiditySinglePtStatic(address,uint256)": FunctionFragment;
    "addLiquiditySingleSyKeepYtStatic(address,uint256)": FunctionFragment;
    "addLiquiditySingleSyStatic(address,uint256)": FunctionFragment;
    "addLiquiditySingleTokenKeepYtStatic(address,address,uint256)": FunctionFragment;
    "addLiquiditySingleTokenStatic(address,address,uint256)": FunctionFragment;
    "readMarketState(address)": FunctionFragment;
    "removeLiquidityDualSyAndPtStatic(address,uint256)": FunctionFragment;
    "removeLiquidityDualTokenAndPtStatic(address,uint256,address)": FunctionFragment;
    "removeLiquiditySinglePtStatic(address,uint256)": FunctionFragment;
    "removeLiquiditySingleSyStatic(address,uint256)": FunctionFragment;
    "removeLiquiditySingleTokenStatic(address,uint256,address)": FunctionFragment;
    "swapExactPtForSyStatic(address,uint256)": FunctionFragment;
    "swapExactPtForTokenStatic(address,uint256,address)": FunctionFragment;
    "swapExactPtForYtStatic(address,uint256)": FunctionFragment;
    "swapExactSyForPtStatic(address,uint256)": FunctionFragment;
    "swapExactSyForYtStatic(address,uint256)": FunctionFragment;
    "swapExactTokenForPtStatic(address,address,uint256)": FunctionFragment;
    "swapExactTokenForYtStatic(address,address,uint256)": FunctionFragment;
    "swapExactYtForPtStatic(address,uint256)": FunctionFragment;
    "swapExactYtForSyStatic(address,uint256)": FunctionFragment;
    "swapExactYtForTokenStatic(address,uint256,address)": FunctionFragment;
    "swapPtForExactSyStatic(address,uint256)": FunctionFragment;
    "swapSyForExactPtStatic(address,uint256)": FunctionFragment;
    "swapSyForExactYtStatic(address,uint256)": FunctionFragment;
    "swapYtForExactSyStatic(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidityDualSyAndPtStatic",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityDualTokenAndPtStatic",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySinglePtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleSyKeepYtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleSyStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleTokenKeepYtStatic",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleTokenStatic",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readMarketState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityDualSyAndPtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityDualTokenAndPtStatic",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySinglePtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySingleSyStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySingleTokenStatic",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForSyStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForTokenStatic",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForYtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactSyForPtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactSyForYtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForPtStatic",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForYtStatic",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactYtForPtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactYtForSyStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactYtForTokenStatic",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPtForExactSyStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSyForExactPtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSyForExactYtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapYtForExactSyStatic",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidityDualSyAndPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityDualTokenAndPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySinglePtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleSyKeepYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleTokenKeepYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readMarketState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityDualSyAndPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityDualTokenAndPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySinglePtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySingleSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySingleTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactSyForPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactSyForYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactYtForPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactYtForSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactYtForTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPtForExactSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapSyForExactPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapSyForExactYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapYtForExactSyStatic",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ActionMarketCoreStatic extends BaseContract {
  contractName: "ActionMarketCoreStatic";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ActionMarketCoreStaticInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidityDualSyAndPtStatic(
      market: string,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netSyUsed: BigNumber;
        netPtUsed: BigNumber;
      }
    >;

    addLiquidityDualTokenAndPtStatic(
      market: string,
      tokenIn: string,
      netTokenDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netTokenUsed: BigNumber;
        netPtUsed: BigNumber;
        netSyUsed: BigNumber;
        netSyDesired: BigNumber;
      }
    >;

    addLiquiditySinglePtStatic(
      market: string,
      netPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netPtToSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyFromSwap: BigNumber;
      }
    >;

    addLiquiditySingleSyKeepYtStatic(
      market: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netYtOut: BigNumber;
        netSyToPY: BigNumber;
      }
    >;

    addLiquiditySingleSyStatic(
      market: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netPtFromSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyToSwap: BigNumber;
      }
    >;

    addLiquiditySingleTokenKeepYtStatic(
      market: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netYtOut: BigNumber;
        netSyMinted: BigNumber;
        netSyToPY: BigNumber;
      }
    >;

    addLiquiditySingleTokenStatic(
      market: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netLpOut: BigNumber;
        netPtFromSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyMinted: BigNumber;
        netSyToSwap: BigNumber;
      }
    >;

    readMarketState(
      market: string,
      overrides?: CallOverrides
    ): Promise<[MarketStateStructOutput]>;

    removeLiquidityDualSyAndPtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { netSyOut: BigNumber; netPtOut: BigNumber }
    >;

    removeLiquidityDualTokenAndPtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netTokenOut: BigNumber;
        netPtOut: BigNumber;
        netSyToRedeem: BigNumber;
      }
    >;

    removeLiquiditySinglePtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netPtOut: BigNumber;
        netPtFromSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyFromBurn: BigNumber;
        netPtFromBurn: BigNumber;
      }
    >;

    removeLiquiditySingleSyStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netSyOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyFromBurn: BigNumber;
        netPtFromBurn: BigNumber;
        netSyFromSwap: BigNumber;
      }
    >;

    removeLiquiditySingleTokenStatic(
      market: string,
      netLpToRemove: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netTokenOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyOut: BigNumber;
        netSyFromBurn: BigNumber;
        netPtFromBurn: BigNumber;
        netSyFromSwap: BigNumber;
      }
    >;

    swapExactPtForSyStatic(
      market: string,
      exactPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netSyOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactPtForTokenStatic(
      market: string,
      exactPtIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netTokenOut: BigNumber;
        netSyToRedeem: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactPtForYtStatic(
      market: string,
      exactPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netYtOut: BigNumber;
        totalPtToSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactSyForPtStatic(
      market: string,
      exactSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netPtOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactSyForYtStatic(
      market: string,
      exactSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netYtOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactTokenForPtStatic(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netPtOut: BigNumber;
        netSyMinted: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactTokenForYtStatic(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netYtOut: BigNumber;
        netSyMinted: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactYtForPtStatic(
      market: string,
      exactYtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netPtOut: BigNumber;
        totalPtSwapped: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactYtForSyStatic(
      market: string,
      exactYtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netSyOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyOwedInt: BigNumber;
        netPYToRepaySyOwedInt: BigNumber;
        netPYToRedeemSyOutInt: BigNumber;
      }
    >;

    swapExactYtForTokenStatic(
      market: string,
      exactYtIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netTokenOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyOut: BigNumber;
        netSyOwedInt: BigNumber;
        netPYToRepaySyOwedInt: BigNumber;
        netPYToRedeemSyOutInt: BigNumber;
      }
    >;

    swapPtForExactSyStatic(
      market: string,
      exactSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netPtIn: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapSyForExactPtStatic(
      market: string,
      exactPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netSyIn: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapSyForExactYtStatic(
      market: string,
      exactYtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netSyIn: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyReceivedInt: BigNumber;
        totalSyNeedInt: BigNumber;
      }
    >;

    swapYtForExactSyStatic(
      market: string,
      exactSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netYtIn: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;
  };

  addLiquidityDualSyAndPtStatic(
    market: string,
    netSyDesired: BigNumberish,
    netPtDesired: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      netLpOut: BigNumber;
      netSyUsed: BigNumber;
      netPtUsed: BigNumber;
    }
  >;

  addLiquidityDualTokenAndPtStatic(
    market: string,
    tokenIn: string,
    netTokenDesired: BigNumberish,
    netPtDesired: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netLpOut: BigNumber;
      netTokenUsed: BigNumber;
      netPtUsed: BigNumber;
      netSyUsed: BigNumber;
      netSyDesired: BigNumber;
    }
  >;

  addLiquiditySinglePtStatic(
    market: string,
    netPtIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netLpOut: BigNumber;
      netPtToSwap: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyFromSwap: BigNumber;
    }
  >;

  addLiquiditySingleSyKeepYtStatic(
    market: string,
    netSyIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      netLpOut: BigNumber;
      netYtOut: BigNumber;
      netSyToPY: BigNumber;
    }
  >;

  addLiquiditySingleSyStatic(
    market: string,
    netSyIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netLpOut: BigNumber;
      netPtFromSwap: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyToSwap: BigNumber;
    }
  >;

  addLiquiditySingleTokenKeepYtStatic(
    market: string,
    tokenIn: string,
    netTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      netLpOut: BigNumber;
      netYtOut: BigNumber;
      netSyMinted: BigNumber;
      netSyToPY: BigNumber;
    }
  >;

  addLiquiditySingleTokenStatic(
    market: string,
    tokenIn: string,
    netTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      netLpOut: BigNumber;
      netPtFromSwap: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyMinted: BigNumber;
      netSyToSwap: BigNumber;
    }
  >;

  readMarketState(
    market: string,
    overrides?: CallOverrides
  ): Promise<MarketStateStructOutput>;

  removeLiquidityDualSyAndPtStatic(
    market: string,
    netLpToRemove: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { netSyOut: BigNumber; netPtOut: BigNumber }
  >;

  removeLiquidityDualTokenAndPtStatic(
    market: string,
    netLpToRemove: BigNumberish,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      netTokenOut: BigNumber;
      netPtOut: BigNumber;
      netSyToRedeem: BigNumber;
    }
  >;

  removeLiquiditySinglePtStatic(
    market: string,
    netLpToRemove: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      netPtOut: BigNumber;
      netPtFromSwap: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyFromBurn: BigNumber;
      netPtFromBurn: BigNumber;
    }
  >;

  removeLiquiditySingleSyStatic(
    market: string,
    netLpToRemove: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      netSyOut: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyFromBurn: BigNumber;
      netPtFromBurn: BigNumber;
      netSyFromSwap: BigNumber;
    }
  >;

  removeLiquiditySingleTokenStatic(
    market: string,
    netLpToRemove: BigNumberish,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      netTokenOut: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyOut: BigNumber;
      netSyFromBurn: BigNumber;
      netPtFromBurn: BigNumber;
      netSyFromSwap: BigNumber;
    }
  >;

  swapExactPtForSyStatic(
    market: string,
    exactPtIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      netSyOut: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapExactPtForTokenStatic(
    market: string,
    exactPtIn: BigNumberish,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netTokenOut: BigNumber;
      netSyToRedeem: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapExactPtForYtStatic(
    market: string,
    exactPtIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netYtOut: BigNumber;
      totalPtToSwap: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapExactSyForPtStatic(
    market: string,
    exactSyIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      netPtOut: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapExactSyForYtStatic(
    market: string,
    exactSyIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      netYtOut: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapExactTokenForPtStatic(
    market: string,
    tokenIn: string,
    amountTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netPtOut: BigNumber;
      netSyMinted: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapExactTokenForYtStatic(
    market: string,
    tokenIn: string,
    amountTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netYtOut: BigNumber;
      netSyMinted: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapExactYtForPtStatic(
    market: string,
    exactYtIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netPtOut: BigNumber;
      totalPtSwapped: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapExactYtForSyStatic(
    market: string,
    exactYtIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      netSyOut: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyOwedInt: BigNumber;
      netPYToRepaySyOwedInt: BigNumber;
      netPYToRedeemSyOutInt: BigNumber;
    }
  >;

  swapExactYtForTokenStatic(
    market: string,
    exactYtIn: BigNumberish,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      netTokenOut: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyOut: BigNumber;
      netSyOwedInt: BigNumber;
      netPYToRepaySyOwedInt: BigNumber;
      netPYToRedeemSyOutInt: BigNumber;
    }
  >;

  swapPtForExactSyStatic(
    market: string,
    exactSyOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      netPtIn: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapSyForExactPtStatic(
    market: string,
    exactPtOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      netSyIn: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapSyForExactYtStatic(
    market: string,
    exactYtOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netSyIn: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyReceivedInt: BigNumber;
      totalSyNeedInt: BigNumber;
    }
  >;

  swapYtForExactSyStatic(
    market: string,
    exactSyOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      netYtIn: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  callStatic: {
    addLiquidityDualSyAndPtStatic(
      market: string,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netSyUsed: BigNumber;
        netPtUsed: BigNumber;
      }
    >;

    addLiquidityDualTokenAndPtStatic(
      market: string,
      tokenIn: string,
      netTokenDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netTokenUsed: BigNumber;
        netPtUsed: BigNumber;
        netSyUsed: BigNumber;
        netSyDesired: BigNumber;
      }
    >;

    addLiquiditySinglePtStatic(
      market: string,
      netPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netPtToSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyFromSwap: BigNumber;
      }
    >;

    addLiquiditySingleSyKeepYtStatic(
      market: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netYtOut: BigNumber;
        netSyToPY: BigNumber;
      }
    >;

    addLiquiditySingleSyStatic(
      market: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netPtFromSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyToSwap: BigNumber;
      }
    >;

    addLiquiditySingleTokenKeepYtStatic(
      market: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netYtOut: BigNumber;
        netSyMinted: BigNumber;
        netSyToPY: BigNumber;
      }
    >;

    addLiquiditySingleTokenStatic(
      market: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netLpOut: BigNumber;
        netPtFromSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyMinted: BigNumber;
        netSyToSwap: BigNumber;
      }
    >;

    readMarketState(
      market: string,
      overrides?: CallOverrides
    ): Promise<MarketStateStructOutput>;

    removeLiquidityDualSyAndPtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { netSyOut: BigNumber; netPtOut: BigNumber }
    >;

    removeLiquidityDualTokenAndPtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netTokenOut: BigNumber;
        netPtOut: BigNumber;
        netSyToRedeem: BigNumber;
      }
    >;

    removeLiquiditySinglePtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netPtOut: BigNumber;
        netPtFromSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyFromBurn: BigNumber;
        netPtFromBurn: BigNumber;
      }
    >;

    removeLiquiditySingleSyStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netSyOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyFromBurn: BigNumber;
        netPtFromBurn: BigNumber;
        netSyFromSwap: BigNumber;
      }
    >;

    removeLiquiditySingleTokenStatic(
      market: string,
      netLpToRemove: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netTokenOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyOut: BigNumber;
        netSyFromBurn: BigNumber;
        netPtFromBurn: BigNumber;
        netSyFromSwap: BigNumber;
      }
    >;

    swapExactPtForSyStatic(
      market: string,
      exactPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netSyOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactPtForTokenStatic(
      market: string,
      exactPtIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netTokenOut: BigNumber;
        netSyToRedeem: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactPtForYtStatic(
      market: string,
      exactPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netYtOut: BigNumber;
        totalPtToSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactSyForPtStatic(
      market: string,
      exactSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netPtOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactSyForYtStatic(
      market: string,
      exactSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netYtOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactTokenForPtStatic(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netPtOut: BigNumber;
        netSyMinted: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactTokenForYtStatic(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netYtOut: BigNumber;
        netSyMinted: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactYtForPtStatic(
      market: string,
      exactYtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netPtOut: BigNumber;
        totalPtSwapped: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactYtForSyStatic(
      market: string,
      exactYtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netSyOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyOwedInt: BigNumber;
        netPYToRepaySyOwedInt: BigNumber;
        netPYToRedeemSyOutInt: BigNumber;
      }
    >;

    swapExactYtForTokenStatic(
      market: string,
      exactYtIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netTokenOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyOut: BigNumber;
        netSyOwedInt: BigNumber;
        netPYToRepaySyOwedInt: BigNumber;
        netPYToRedeemSyOutInt: BigNumber;
      }
    >;

    swapPtForExactSyStatic(
      market: string,
      exactSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netPtIn: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapSyForExactPtStatic(
      market: string,
      exactPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netSyIn: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapSyForExactYtStatic(
      market: string,
      exactYtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netSyIn: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyReceivedInt: BigNumber;
        totalSyNeedInt: BigNumber;
      }
    >;

    swapYtForExactSyStatic(
      market: string,
      exactSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netYtIn: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    addLiquidityDualSyAndPtStatic(
      market: string,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityDualTokenAndPtStatic(
      market: string,
      tokenIn: string,
      netTokenDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquiditySinglePtStatic(
      market: string,
      netPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquiditySingleSyKeepYtStatic(
      market: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquiditySingleSyStatic(
      market: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquiditySingleTokenKeepYtStatic(
      market: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquiditySingleTokenStatic(
      market: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readMarketState(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityDualSyAndPtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityDualTokenAndPtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquiditySinglePtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquiditySingleSyStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquiditySingleTokenStatic(
      market: string,
      netLpToRemove: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactPtForSyStatic(
      market: string,
      exactPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactPtForTokenStatic(
      market: string,
      exactPtIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactPtForYtStatic(
      market: string,
      exactPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactSyForPtStatic(
      market: string,
      exactSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactSyForYtStatic(
      market: string,
      exactSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactTokenForPtStatic(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactTokenForYtStatic(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactYtForPtStatic(
      market: string,
      exactYtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactYtForSyStatic(
      market: string,
      exactYtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactYtForTokenStatic(
      market: string,
      exactYtIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapPtForExactSyStatic(
      market: string,
      exactSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapSyForExactPtStatic(
      market: string,
      exactPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapSyForExactYtStatic(
      market: string,
      exactYtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapYtForExactSyStatic(
      market: string,
      exactSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidityDualSyAndPtStatic(
      market: string,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidityDualTokenAndPtStatic(
      market: string,
      tokenIn: string,
      netTokenDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquiditySinglePtStatic(
      market: string,
      netPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquiditySingleSyKeepYtStatic(
      market: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquiditySingleSyStatic(
      market: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquiditySingleTokenKeepYtStatic(
      market: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquiditySingleTokenStatic(
      market: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readMarketState(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityDualSyAndPtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityDualTokenAndPtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquiditySinglePtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquiditySingleSyStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquiditySingleTokenStatic(
      market: string,
      netLpToRemove: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactPtForSyStatic(
      market: string,
      exactPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactPtForTokenStatic(
      market: string,
      exactPtIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactPtForYtStatic(
      market: string,
      exactPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactSyForPtStatic(
      market: string,
      exactSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactSyForYtStatic(
      market: string,
      exactSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactTokenForPtStatic(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactTokenForYtStatic(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactYtForPtStatic(
      market: string,
      exactYtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactYtForSyStatic(
      market: string,
      exactYtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactYtForTokenStatic(
      market: string,
      exactYtIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapPtForExactSyStatic(
      market: string,
      exactSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapSyForExactPtStatic(
      market: string,
      exactPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapSyForExactYtStatic(
      market: string,
      exactYtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapYtForExactSyStatic(
      market: string,
      exactSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
