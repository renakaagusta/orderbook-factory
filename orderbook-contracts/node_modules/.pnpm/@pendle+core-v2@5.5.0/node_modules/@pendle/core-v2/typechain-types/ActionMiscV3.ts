/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type ExitPostExpReturnParamsStruct = {
  netPtFromRemove: BigNumberish;
  netSyFromRemove: BigNumberish;
  netPtRedeem: BigNumberish;
  netSyFromRedeem: BigNumberish;
  totalSyOut: BigNumberish;
};

export type ExitPostExpReturnParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  netPtFromRemove: BigNumber;
  netSyFromRemove: BigNumber;
  netPtRedeem: BigNumber;
  netSyFromRedeem: BigNumber;
  totalSyOut: BigNumber;
};

export type ExitPreExpReturnParamsStruct = {
  netPtFromRemove: BigNumberish;
  netSyFromRemove: BigNumberish;
  netPyRedeem: BigNumberish;
  netSyFromRedeem: BigNumberish;
  netPtSwap: BigNumberish;
  netYtSwap: BigNumberish;
  netSyFromSwap: BigNumberish;
  netSyFee: BigNumberish;
  totalSyOut: BigNumberish;
};

export type ExitPreExpReturnParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  netPtFromRemove: BigNumber;
  netSyFromRemove: BigNumber;
  netPyRedeem: BigNumber;
  netSyFromRedeem: BigNumber;
  netPtSwap: BigNumber;
  netYtSwap: BigNumber;
  netSyFromSwap: BigNumber;
  netSyFee: BigNumber;
  totalSyOut: BigNumber;
};

export type SwapDataStruct = {
  swapType: BigNumberish;
  extRouter: string;
  extCalldata: BytesLike;
  needScale: boolean;
};

export type SwapDataStructOutput = [number, string, string, boolean] & {
  swapType: number;
  extRouter: string;
  extCalldata: string;
  needScale: boolean;
};

export type TokenOutputStruct = {
  tokenOut: string;
  minTokenOut: BigNumberish;
  tokenRedeemSy: string;
  pendleSwap: string;
  swapData: SwapDataStruct;
};

export type TokenOutputStructOutput = [
  string,
  BigNumber,
  string,
  string,
  SwapDataStructOutput
] & {
  tokenOut: string;
  minTokenOut: BigNumber;
  tokenRedeemSy: string;
  pendleSwap: string;
  swapData: SwapDataStructOutput;
};

export type OrderStruct = {
  salt: BigNumberish;
  expiry: BigNumberish;
  nonce: BigNumberish;
  orderType: BigNumberish;
  token: string;
  YT: string;
  maker: string;
  receiver: string;
  makingAmount: BigNumberish;
  lnImpliedRate: BigNumberish;
  failSafeRate: BigNumberish;
  permit: BytesLike;
};

export type OrderStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  salt: BigNumber;
  expiry: BigNumber;
  nonce: BigNumber;
  orderType: number;
  token: string;
  YT: string;
  maker: string;
  receiver: string;
  makingAmount: BigNumber;
  lnImpliedRate: BigNumber;
  failSafeRate: BigNumber;
  permit: string;
};

export type FillOrderParamsStruct = {
  order: OrderStruct;
  signature: BytesLike;
  makingAmount: BigNumberish;
};

export type FillOrderParamsStructOutput = [
  OrderStructOutput,
  string,
  BigNumber
] & { order: OrderStructOutput; signature: string; makingAmount: BigNumber };

export type LimitOrderDataStruct = {
  limitRouter: string;
  epsSkipMarket: BigNumberish;
  normalFills: FillOrderParamsStruct[];
  flashFills: FillOrderParamsStruct[];
  optData: BytesLike;
};

export type LimitOrderDataStructOutput = [
  string,
  BigNumber,
  FillOrderParamsStructOutput[],
  FillOrderParamsStructOutput[],
  string
] & {
  limitRouter: string;
  epsSkipMarket: BigNumber;
  normalFills: FillOrderParamsStructOutput[];
  flashFills: FillOrderParamsStructOutput[];
  optData: string;
};

export type TokenInputStruct = {
  tokenIn: string;
  netTokenIn: BigNumberish;
  tokenMintSy: string;
  pendleSwap: string;
  swapData: SwapDataStruct;
};

export type TokenInputStructOutput = [
  string,
  BigNumber,
  string,
  string,
  SwapDataStructOutput
] & {
  tokenIn: string;
  netTokenIn: BigNumber;
  tokenMintSy: string;
  pendleSwap: string;
  swapData: SwapDataStructOutput;
};

export type RedeemYtIncomeToTokenStructStruct = {
  yt: string;
  doRedeemInterest: boolean;
  doRedeemRewards: boolean;
  tokenRedeemSy: string;
  minTokenRedeemOut: BigNumberish;
};

export type RedeemYtIncomeToTokenStructStructOutput = [
  string,
  boolean,
  boolean,
  string,
  BigNumber
] & {
  yt: string;
  doRedeemInterest: boolean;
  doRedeemRewards: boolean;
  tokenRedeemSy: string;
  minTokenRedeemOut: BigNumber;
};

export type SwapDataExtraStruct = {
  tokenIn: string;
  tokenOut: string;
  minOut: BigNumberish;
  swapData: SwapDataStruct;
};

export type SwapDataExtraStructOutput = [
  string,
  string,
  BigNumber,
  SwapDataStructOutput
] & {
  tokenIn: string;
  tokenOut: string;
  minOut: BigNumber;
  swapData: SwapDataStructOutput;
};

export declare namespace IPActionMiscV3 {
  export type Call3Struct = { allowFailure: boolean; callData: BytesLike };

  export type Call3StructOutput = [boolean, string] & {
    allowFailure: boolean;
    callData: string;
  };

  export type ResultStruct = { success: boolean; returnData: BytesLike };

  export type ResultStructOutput = [boolean, string] & {
    success: boolean;
    returnData: string;
  };
}

export interface ActionMiscV3Interface extends utils.Interface {
  contractName: "ActionMiscV3";
  functions: {
    "boostMarkets(address[])": FunctionFragment;
    "callAndReflect(address,bytes,bytes,bytes)": FunctionFragment;
    "exitPostExpToSy(address,address,uint256,uint256,uint256)": FunctionFragment;
    "exitPostExpToToken(address,address,uint256,uint256,(address,uint256,address,address,(uint8,address,bytes,bool)))": FunctionFragment;
    "exitPreExpToSy(address,address,uint256,uint256,uint256,uint256,(address,uint256,((uint256,uint256,uint256,uint8,address,address,address,address,uint256,uint256,uint256,bytes),bytes,uint256)[],((uint256,uint256,uint256,uint8,address,address,address,address,uint256,uint256,uint256,bytes),bytes,uint256)[],bytes))": FunctionFragment;
    "exitPreExpToToken(address,address,uint256,uint256,uint256,(address,uint256,address,address,(uint8,address,bytes,bool)),(address,uint256,((uint256,uint256,uint256,uint8,address,address,address,address,uint256,uint256,uint256,bytes),bytes,uint256)[],((uint256,uint256,uint256,uint8,address,address,address,address,uint256,uint256,uint256,bytes),bytes,uint256)[],bytes))": FunctionFragment;
    "mintPyFromSy(address,address,uint256,uint256)": FunctionFragment;
    "mintPyFromToken(address,address,uint256,(address,uint256,address,address,(uint8,address,bytes,bool)))": FunctionFragment;
    "mintSyFromToken(address,address,uint256,(address,uint256,address,address,(uint8,address,bytes,bool)))": FunctionFragment;
    "multicall((bool,bytes)[])": FunctionFragment;
    "redeemDueInterestAndRewards(address,address[],address[],address[])": FunctionFragment;
    "redeemDueInterestAndRewardsV2(address[],(address,bool,bool,address,uint256)[],address[],address,(address,address,uint256,(uint8,address,bytes,bool))[])": FunctionFragment;
    "redeemPyToSy(address,address,uint256,uint256)": FunctionFragment;
    "redeemPyToToken(address,address,uint256,(address,uint256,address,address,(uint8,address,bytes,bool)))": FunctionFragment;
    "redeemSyToToken(address,address,uint256,(address,uint256,address,address,(uint8,address,bytes,bool)))": FunctionFragment;
    "simulate(address,bytes)": FunctionFragment;
    "swapTokenToTokenViaSy(address,address,(address,uint256,address,address,(uint8,address,bytes,bool)),address,uint256)": FunctionFragment;
    "swapTokensToTokens(address,(address,address,uint256,(uint8,address,bytes,bool))[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "boostMarkets",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "callAndReflect",
    values: [string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPostExpToSy",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPostExpToToken",
    values: [string, string, BigNumberish, BigNumberish, TokenOutputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPreExpToSy",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      LimitOrderDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPreExpToToken",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      TokenOutputStruct,
      LimitOrderDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPyFromSy",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPyFromToken",
    values: [string, string, BigNumberish, TokenInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSyFromToken",
    values: [string, string, BigNumberish, TokenInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [IPActionMiscV3.Call3Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemDueInterestAndRewards",
    values: [string, string[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemDueInterestAndRewardsV2",
    values: [
      string[],
      RedeemYtIncomeToTokenStructStruct[],
      string[],
      string,
      SwapDataExtraStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPyToSy",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPyToToken",
    values: [string, string, BigNumberish, TokenOutputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemSyToToken",
    values: [string, string, BigNumberish, TokenOutputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "simulate",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenToTokenViaSy",
    values: [string, string, TokenInputStruct, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensToTokens",
    values: [string, SwapDataExtraStruct[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "boostMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callAndReflect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPostExpToSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPostExpToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPreExpToSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPreExpToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPyFromSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPyFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintSyFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemDueInterestAndRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemDueInterestAndRewardsV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPyToSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPyToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemSyToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenToTokenViaSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensToTokens",
    data: BytesLike
  ): Result;

  events: {
    "AddLiquidityDualSyAndPt(address,address,address,uint256,uint256,uint256)": EventFragment;
    "AddLiquidityDualTokenAndPt(address,address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "AddLiquiditySinglePt(address,address,address,uint256,uint256)": EventFragment;
    "AddLiquiditySingleSy(address,address,address,uint256,uint256)": EventFragment;
    "AddLiquiditySingleSyKeepYt(address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "AddLiquiditySingleToken(address,address,address,address,uint256,uint256,uint256)": EventFragment;
    "AddLiquiditySingleTokenKeepYt(address,address,address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ExitPostExpToSy(address,address,address,uint256,tuple)": EventFragment;
    "ExitPostExpToToken(address,address,address,address,uint256,uint256,tuple)": EventFragment;
    "ExitPreExpToSy(address,address,address,uint256,tuple)": EventFragment;
    "ExitPreExpToToken(address,address,address,address,uint256,uint256,tuple)": EventFragment;
    "MintPyFromSy(address,address,address,uint256,uint256)": EventFragment;
    "MintPyFromToken(address,address,address,address,uint256,uint256,uint256)": EventFragment;
    "MintSyFromToken(address,address,address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RedeemPyToSy(address,address,address,uint256,uint256)": EventFragment;
    "RedeemPyToToken(address,address,address,address,uint256,uint256,uint256)": EventFragment;
    "RedeemSyToToken(address,address,address,address,uint256,uint256)": EventFragment;
    "RemoveLiquidityDualSyAndPt(address,address,address,uint256,uint256,uint256)": EventFragment;
    "RemoveLiquidityDualTokenAndPt(address,address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "RemoveLiquiditySinglePt(address,address,address,uint256,uint256)": EventFragment;
    "RemoveLiquiditySingleSy(address,address,address,uint256,uint256)": EventFragment;
    "RemoveLiquiditySingleToken(address,address,address,address,uint256,uint256,uint256)": EventFragment;
    "SelectorToFacetSet(bytes4,address)": EventFragment;
    "SwapPtAndSy(address,address,address,int256,int256)": EventFragment;
    "SwapPtAndToken(address,address,address,address,int256,int256,uint256)": EventFragment;
    "SwapYtAndSy(address,address,address,int256,int256)": EventFragment;
    "SwapYtAndToken(address,address,address,address,int256,int256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidityDualSyAndPt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquidityDualTokenAndPt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquiditySinglePt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquiditySingleSy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquiditySingleSyKeepYt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquiditySingleToken"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AddLiquiditySingleTokenKeepYt"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitPostExpToSy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitPostExpToToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitPreExpToSy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitPreExpToToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintPyFromSy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintPyFromToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintSyFromToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemPyToSy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemPyToToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemSyToToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityDualSyAndPt"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveLiquidityDualTokenAndPt"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquiditySinglePt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquiditySingleSy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquiditySingleToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SelectorToFacetSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapPtAndSy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapPtAndToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapYtAndSy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapYtAndToken"): EventFragment;
}

export type AddLiquidityDualSyAndPtEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netSyUsed: BigNumber;
    netPtUsed: BigNumber;
    netLpOut: BigNumber;
  }
>;

export type AddLiquidityDualSyAndPtEventFilter =
  TypedEventFilter<AddLiquidityDualSyAndPtEvent>;

export type AddLiquidityDualTokenAndPtEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    tokenIn: string;
    receiver: string;
    netTokenUsed: BigNumber;
    netPtUsed: BigNumber;
    netLpOut: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type AddLiquidityDualTokenAndPtEventFilter =
  TypedEventFilter<AddLiquidityDualTokenAndPtEvent>;

export type AddLiquiditySinglePtEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netPtIn: BigNumber;
    netLpOut: BigNumber;
  }
>;

export type AddLiquiditySinglePtEventFilter =
  TypedEventFilter<AddLiquiditySinglePtEvent>;

export type AddLiquiditySingleSyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netSyIn: BigNumber;
    netLpOut: BigNumber;
  }
>;

export type AddLiquiditySingleSyEventFilter =
  TypedEventFilter<AddLiquiditySingleSyEvent>;

export type AddLiquiditySingleSyKeepYtEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netSyIn: BigNumber;
    netSyMintPy: BigNumber;
    netLpOut: BigNumber;
    netYtOut: BigNumber;
  }
>;

export type AddLiquiditySingleSyKeepYtEventFilter =
  TypedEventFilter<AddLiquiditySingleSyKeepYtEvent>;

export type AddLiquiditySingleTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netTokenIn: BigNumber;
    netLpOut: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type AddLiquiditySingleTokenEventFilter =
  TypedEventFilter<AddLiquiditySingleTokenEvent>;

export type AddLiquiditySingleTokenKeepYtEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netTokenIn: BigNumber;
    netLpOut: BigNumber;
    netYtOut: BigNumber;
    netSyMintPy: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type AddLiquiditySingleTokenKeepYtEventFilter =
  TypedEventFilter<AddLiquiditySingleTokenKeepYtEvent>;

export type ExitPostExpToSyEvent = TypedEvent<
  [string, string, string, BigNumber, ExitPostExpReturnParamsStructOutput],
  {
    caller: string;
    market: string;
    receiver: string;
    netLpIn: BigNumber;
    params: ExitPostExpReturnParamsStructOutput;
  }
>;

export type ExitPostExpToSyEventFilter = TypedEventFilter<ExitPostExpToSyEvent>;

export type ExitPostExpToTokenEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    ExitPostExpReturnParamsStructOutput
  ],
  {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netLpIn: BigNumber;
    totalTokenOut: BigNumber;
    params: ExitPostExpReturnParamsStructOutput;
  }
>;

export type ExitPostExpToTokenEventFilter =
  TypedEventFilter<ExitPostExpToTokenEvent>;

export type ExitPreExpToSyEvent = TypedEvent<
  [string, string, string, BigNumber, ExitPreExpReturnParamsStructOutput],
  {
    caller: string;
    market: string;
    receiver: string;
    netLpIn: BigNumber;
    params: ExitPreExpReturnParamsStructOutput;
  }
>;

export type ExitPreExpToSyEventFilter = TypedEventFilter<ExitPreExpToSyEvent>;

export type ExitPreExpToTokenEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    ExitPreExpReturnParamsStructOutput
  ],
  {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netLpIn: BigNumber;
    totalTokenOut: BigNumber;
    params: ExitPreExpReturnParamsStructOutput;
  }
>;

export type ExitPreExpToTokenEventFilter =
  TypedEventFilter<ExitPreExpToTokenEvent>;

export type MintPyFromSyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    receiver: string;
    YT: string;
    netSyIn: BigNumber;
    netPyOut: BigNumber;
  }
>;

export type MintPyFromSyEventFilter = TypedEventFilter<MintPyFromSyEvent>;

export type MintPyFromTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    tokenIn: string;
    YT: string;
    receiver: string;
    netTokenIn: BigNumber;
    netPyOut: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type MintPyFromTokenEventFilter = TypedEventFilter<MintPyFromTokenEvent>;

export type MintSyFromTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    tokenIn: string;
    SY: string;
    receiver: string;
    netTokenIn: BigNumber;
    netSyOut: BigNumber;
  }
>;

export type MintSyFromTokenEventFilter = TypedEventFilter<MintSyFromTokenEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RedeemPyToSyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    receiver: string;
    YT: string;
    netPyIn: BigNumber;
    netSyOut: BigNumber;
  }
>;

export type RedeemPyToSyEventFilter = TypedEventFilter<RedeemPyToSyEvent>;

export type RedeemPyToTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    tokenOut: string;
    YT: string;
    receiver: string;
    netPyIn: BigNumber;
    netTokenOut: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type RedeemPyToTokenEventFilter = TypedEventFilter<RedeemPyToTokenEvent>;

export type RedeemSyToTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    tokenOut: string;
    SY: string;
    receiver: string;
    netSyIn: BigNumber;
    netTokenOut: BigNumber;
  }
>;

export type RedeemSyToTokenEventFilter = TypedEventFilter<RedeemSyToTokenEvent>;

export type RemoveLiquidityDualSyAndPtEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netLpToRemove: BigNumber;
    netPtOut: BigNumber;
    netSyOut: BigNumber;
  }
>;

export type RemoveLiquidityDualSyAndPtEventFilter =
  TypedEventFilter<RemoveLiquidityDualSyAndPtEvent>;

export type RemoveLiquidityDualTokenAndPtEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    tokenOut: string;
    receiver: string;
    netLpToRemove: BigNumber;
    netPtOut: BigNumber;
    netTokenOut: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type RemoveLiquidityDualTokenAndPtEventFilter =
  TypedEventFilter<RemoveLiquidityDualTokenAndPtEvent>;

export type RemoveLiquiditySinglePtEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netLpToRemove: BigNumber;
    netPtOut: BigNumber;
  }
>;

export type RemoveLiquiditySinglePtEventFilter =
  TypedEventFilter<RemoveLiquiditySinglePtEvent>;

export type RemoveLiquiditySingleSyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netLpToRemove: BigNumber;
    netSyOut: BigNumber;
  }
>;

export type RemoveLiquiditySingleSyEventFilter =
  TypedEventFilter<RemoveLiquiditySingleSyEvent>;

export type RemoveLiquiditySingleTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netLpToRemove: BigNumber;
    netTokenOut: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type RemoveLiquiditySingleTokenEventFilter =
  TypedEventFilter<RemoveLiquiditySingleTokenEvent>;

export type SelectorToFacetSetEvent = TypedEvent<
  [string, string],
  { selector: string; facet: string }
>;

export type SelectorToFacetSetEventFilter =
  TypedEventFilter<SelectorToFacetSetEvent>;

export type SwapPtAndSyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netPtToAccount: BigNumber;
    netSyToAccount: BigNumber;
  }
>;

export type SwapPtAndSyEventFilter = TypedEventFilter<SwapPtAndSyEvent>;

export type SwapPtAndTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netPtToAccount: BigNumber;
    netTokenToAccount: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type SwapPtAndTokenEventFilter = TypedEventFilter<SwapPtAndTokenEvent>;

export type SwapYtAndSyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netYtToAccount: BigNumber;
    netSyToAccount: BigNumber;
  }
>;

export type SwapYtAndSyEventFilter = TypedEventFilter<SwapYtAndSyEvent>;

export type SwapYtAndTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netYtToAccount: BigNumber;
    netTokenToAccount: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type SwapYtAndTokenEventFilter = TypedEventFilter<SwapYtAndTokenEvent>;

export interface ActionMiscV3 extends BaseContract {
  contractName: "ActionMiscV3";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ActionMiscV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    boostMarkets(
      markets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callAndReflect(
      reflector: string,
      selfCall1: BytesLike,
      selfCall2: BytesLike,
      reflectCall: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitPostExpToSy(
      receiver: string,
      market: string,
      netPtIn: BigNumberish,
      netLpIn: BigNumberish,
      minSyOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitPostExpToToken(
      receiver: string,
      market: string,
      netPtIn: BigNumberish,
      netLpIn: BigNumberish,
      output: TokenOutputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitPreExpToSy(
      receiver: string,
      market: string,
      netPtIn: BigNumberish,
      netYtIn: BigNumberish,
      netLpIn: BigNumberish,
      minSyOut: BigNumberish,
      limit: LimitOrderDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitPreExpToToken(
      receiver: string,
      market: string,
      netPtIn: BigNumberish,
      netYtIn: BigNumberish,
      netLpIn: BigNumberish,
      output: TokenOutputStruct,
      limit: LimitOrderDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPyFromSy(
      receiver: string,
      YT: string,
      netSyIn: BigNumberish,
      minPyOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPyFromToken(
      receiver: string,
      YT: string,
      minPyOut: BigNumberish,
      input: TokenInputStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintSyFromToken(
      receiver: string,
      SY: string,
      minSyOut: BigNumberish,
      input: TokenInputStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicall(
      calls: IPActionMiscV3.Call3Struct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemDueInterestAndRewards(
      user: string,
      sys: string[],
      yts: string[],
      markets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemDueInterestAndRewardsV2(
      SYs: string[],
      YTs: RedeemYtIncomeToTokenStructStruct[],
      markets: string[],
      pendleSwap: string,
      swaps: SwapDataExtraStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemPyToSy(
      receiver: string,
      YT: string,
      netPyIn: BigNumberish,
      minSyOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemPyToToken(
      receiver: string,
      YT: string,
      netPyIn: BigNumberish,
      output: TokenOutputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemSyToToken(
      receiver: string,
      SY: string,
      netSyIn: BigNumberish,
      output: TokenOutputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    simulate(
      target: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokenToTokenViaSy(
      receiver: string,
      SY: string,
      input: TokenInputStruct,
      tokenRedeemSy: string,
      minTokenOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokensToTokens(
      pendleSwap: string,
      swaps: SwapDataExtraStruct[],
      netSwaps: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  boostMarkets(
    markets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callAndReflect(
    reflector: string,
    selfCall1: BytesLike,
    selfCall2: BytesLike,
    reflectCall: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitPostExpToSy(
    receiver: string,
    market: string,
    netPtIn: BigNumberish,
    netLpIn: BigNumberish,
    minSyOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitPostExpToToken(
    receiver: string,
    market: string,
    netPtIn: BigNumberish,
    netLpIn: BigNumberish,
    output: TokenOutputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitPreExpToSy(
    receiver: string,
    market: string,
    netPtIn: BigNumberish,
    netYtIn: BigNumberish,
    netLpIn: BigNumberish,
    minSyOut: BigNumberish,
    limit: LimitOrderDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitPreExpToToken(
    receiver: string,
    market: string,
    netPtIn: BigNumberish,
    netYtIn: BigNumberish,
    netLpIn: BigNumberish,
    output: TokenOutputStruct,
    limit: LimitOrderDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPyFromSy(
    receiver: string,
    YT: string,
    netSyIn: BigNumberish,
    minPyOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPyFromToken(
    receiver: string,
    YT: string,
    minPyOut: BigNumberish,
    input: TokenInputStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintSyFromToken(
    receiver: string,
    SY: string,
    minSyOut: BigNumberish,
    input: TokenInputStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicall(
    calls: IPActionMiscV3.Call3Struct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemDueInterestAndRewards(
    user: string,
    sys: string[],
    yts: string[],
    markets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemDueInterestAndRewardsV2(
    SYs: string[],
    YTs: RedeemYtIncomeToTokenStructStruct[],
    markets: string[],
    pendleSwap: string,
    swaps: SwapDataExtraStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemPyToSy(
    receiver: string,
    YT: string,
    netPyIn: BigNumberish,
    minSyOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemPyToToken(
    receiver: string,
    YT: string,
    netPyIn: BigNumberish,
    output: TokenOutputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemSyToToken(
    receiver: string,
    SY: string,
    netSyIn: BigNumberish,
    output: TokenOutputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  simulate(
    target: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokenToTokenViaSy(
    receiver: string,
    SY: string,
    input: TokenInputStruct,
    tokenRedeemSy: string,
    minTokenOut: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokensToTokens(
    pendleSwap: string,
    swaps: SwapDataExtraStruct[],
    netSwaps: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    boostMarkets(markets: string[], overrides?: CallOverrides): Promise<void>;

    callAndReflect(
      reflector: string,
      selfCall1: BytesLike,
      selfCall2: BytesLike,
      reflectCall: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        selfRes1: string;
        selfRes2: string;
        reflectRes: string;
      }
    >;

    exitPostExpToSy(
      receiver: string,
      market: string,
      netPtIn: BigNumberish,
      netLpIn: BigNumberish,
      minSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ExitPostExpReturnParamsStructOutput>;

    exitPostExpToToken(
      receiver: string,
      market: string,
      netPtIn: BigNumberish,
      netLpIn: BigNumberish,
      output: TokenOutputStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, ExitPostExpReturnParamsStructOutput] & {
        totalTokenOut: BigNumber;
        params: ExitPostExpReturnParamsStructOutput;
      }
    >;

    exitPreExpToSy(
      receiver: string,
      market: string,
      netPtIn: BigNumberish,
      netYtIn: BigNumberish,
      netLpIn: BigNumberish,
      minSyOut: BigNumberish,
      limit: LimitOrderDataStruct,
      overrides?: CallOverrides
    ): Promise<ExitPreExpReturnParamsStructOutput>;

    exitPreExpToToken(
      receiver: string,
      market: string,
      netPtIn: BigNumberish,
      netYtIn: BigNumberish,
      netLpIn: BigNumberish,
      output: TokenOutputStruct,
      limit: LimitOrderDataStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, ExitPreExpReturnParamsStructOutput] & {
        totalTokenOut: BigNumber;
        params: ExitPreExpReturnParamsStructOutput;
      }
    >;

    mintPyFromSy(
      receiver: string,
      YT: string,
      netSyIn: BigNumberish,
      minPyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintPyFromToken(
      receiver: string,
      YT: string,
      minPyOut: BigNumberish,
      input: TokenInputStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { netPyOut: BigNumber; netSyInterm: BigNumber }
    >;

    mintSyFromToken(
      receiver: string,
      SY: string,
      minSyOut: BigNumberish,
      input: TokenInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      calls: IPActionMiscV3.Call3Struct[],
      overrides?: CallOverrides
    ): Promise<IPActionMiscV3.ResultStructOutput[]>;

    redeemDueInterestAndRewards(
      user: string,
      sys: string[],
      yts: string[],
      markets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    redeemDueInterestAndRewardsV2(
      SYs: string[],
      YTs: RedeemYtIncomeToTokenStructStruct[],
      markets: string[],
      pendleSwap: string,
      swaps: SwapDataExtraStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        netOutFromSwaps: BigNumber[];
        netInterests: BigNumber[];
      }
    >;

    redeemPyToSy(
      receiver: string,
      YT: string,
      netPyIn: BigNumberish,
      minSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemPyToToken(
      receiver: string,
      YT: string,
      netPyIn: BigNumberish,
      output: TokenOutputStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        netTokenOut: BigNumber;
        netSyInterm: BigNumber;
      }
    >;

    redeemSyToToken(
      receiver: string,
      SY: string,
      netSyIn: BigNumberish,
      output: TokenOutputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    simulate(
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokenToTokenViaSy(
      receiver: string,
      SY: string,
      input: TokenInputStruct,
      tokenRedeemSy: string,
      minTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        netTokenOut: BigNumber;
        netSyInterm: BigNumber;
      }
    >;

    swapTokensToTokens(
      pendleSwap: string,
      swaps: SwapDataExtraStruct[],
      netSwaps: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {
    "AddLiquidityDualSyAndPt(address,address,address,uint256,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netSyUsed?: null,
      netPtUsed?: null,
      netLpOut?: null
    ): AddLiquidityDualSyAndPtEventFilter;
    AddLiquidityDualSyAndPt(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netSyUsed?: null,
      netPtUsed?: null,
      netLpOut?: null
    ): AddLiquidityDualSyAndPtEventFilter;

    "AddLiquidityDualTokenAndPt(address,address,address,address,uint256,uint256,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      tokenIn?: string | null,
      receiver?: null,
      netTokenUsed?: null,
      netPtUsed?: null,
      netLpOut?: null,
      netSyInterm?: null
    ): AddLiquidityDualTokenAndPtEventFilter;
    AddLiquidityDualTokenAndPt(
      caller?: string | null,
      market?: string | null,
      tokenIn?: string | null,
      receiver?: null,
      netTokenUsed?: null,
      netPtUsed?: null,
      netLpOut?: null,
      netSyInterm?: null
    ): AddLiquidityDualTokenAndPtEventFilter;

    "AddLiquiditySinglePt(address,address,address,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netPtIn?: null,
      netLpOut?: null
    ): AddLiquiditySinglePtEventFilter;
    AddLiquiditySinglePt(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netPtIn?: null,
      netLpOut?: null
    ): AddLiquiditySinglePtEventFilter;

    "AddLiquiditySingleSy(address,address,address,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netSyIn?: null,
      netLpOut?: null
    ): AddLiquiditySingleSyEventFilter;
    AddLiquiditySingleSy(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netSyIn?: null,
      netLpOut?: null
    ): AddLiquiditySingleSyEventFilter;

    "AddLiquiditySingleSyKeepYt(address,address,address,uint256,uint256,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netSyIn?: null,
      netSyMintPy?: null,
      netLpOut?: null,
      netYtOut?: null
    ): AddLiquiditySingleSyKeepYtEventFilter;
    AddLiquiditySingleSyKeepYt(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netSyIn?: null,
      netSyMintPy?: null,
      netLpOut?: null,
      netYtOut?: null
    ): AddLiquiditySingleSyKeepYtEventFilter;

    "AddLiquiditySingleToken(address,address,address,address,uint256,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netTokenIn?: null,
      netLpOut?: null,
      netSyInterm?: null
    ): AddLiquiditySingleTokenEventFilter;
    AddLiquiditySingleToken(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netTokenIn?: null,
      netLpOut?: null,
      netSyInterm?: null
    ): AddLiquiditySingleTokenEventFilter;

    "AddLiquiditySingleTokenKeepYt(address,address,address,address,uint256,uint256,uint256,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netTokenIn?: null,
      netLpOut?: null,
      netYtOut?: null,
      netSyMintPy?: null,
      netSyInterm?: null
    ): AddLiquiditySingleTokenKeepYtEventFilter;
    AddLiquiditySingleTokenKeepYt(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netTokenIn?: null,
      netLpOut?: null,
      netYtOut?: null,
      netSyMintPy?: null,
      netSyInterm?: null
    ): AddLiquiditySingleTokenKeepYtEventFilter;

    "ExitPostExpToSy(address,address,address,uint256,tuple)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpIn?: null,
      params?: null
    ): ExitPostExpToSyEventFilter;
    ExitPostExpToSy(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpIn?: null,
      params?: null
    ): ExitPostExpToSyEventFilter;

    "ExitPostExpToToken(address,address,address,address,uint256,uint256,tuple)"(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netLpIn?: null,
      totalTokenOut?: null,
      params?: null
    ): ExitPostExpToTokenEventFilter;
    ExitPostExpToToken(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netLpIn?: null,
      totalTokenOut?: null,
      params?: null
    ): ExitPostExpToTokenEventFilter;

    "ExitPreExpToSy(address,address,address,uint256,tuple)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpIn?: null,
      params?: null
    ): ExitPreExpToSyEventFilter;
    ExitPreExpToSy(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpIn?: null,
      params?: null
    ): ExitPreExpToSyEventFilter;

    "ExitPreExpToToken(address,address,address,address,uint256,uint256,tuple)"(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netLpIn?: null,
      totalTokenOut?: null,
      params?: null
    ): ExitPreExpToTokenEventFilter;
    ExitPreExpToToken(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netLpIn?: null,
      totalTokenOut?: null,
      params?: null
    ): ExitPreExpToTokenEventFilter;

    "MintPyFromSy(address,address,address,uint256,uint256)"(
      caller?: string | null,
      receiver?: string | null,
      YT?: string | null,
      netSyIn?: null,
      netPyOut?: null
    ): MintPyFromSyEventFilter;
    MintPyFromSy(
      caller?: string | null,
      receiver?: string | null,
      YT?: string | null,
      netSyIn?: null,
      netPyOut?: null
    ): MintPyFromSyEventFilter;

    "MintPyFromToken(address,address,address,address,uint256,uint256,uint256)"(
      caller?: string | null,
      tokenIn?: string | null,
      YT?: string | null,
      receiver?: null,
      netTokenIn?: null,
      netPyOut?: null,
      netSyInterm?: null
    ): MintPyFromTokenEventFilter;
    MintPyFromToken(
      caller?: string | null,
      tokenIn?: string | null,
      YT?: string | null,
      receiver?: null,
      netTokenIn?: null,
      netPyOut?: null,
      netSyInterm?: null
    ): MintPyFromTokenEventFilter;

    "MintSyFromToken(address,address,address,address,uint256,uint256)"(
      caller?: string | null,
      tokenIn?: string | null,
      SY?: string | null,
      receiver?: null,
      netTokenIn?: null,
      netSyOut?: null
    ): MintSyFromTokenEventFilter;
    MintSyFromToken(
      caller?: string | null,
      tokenIn?: string | null,
      SY?: string | null,
      receiver?: null,
      netTokenIn?: null,
      netSyOut?: null
    ): MintSyFromTokenEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RedeemPyToSy(address,address,address,uint256,uint256)"(
      caller?: string | null,
      receiver?: string | null,
      YT?: string | null,
      netPyIn?: null,
      netSyOut?: null
    ): RedeemPyToSyEventFilter;
    RedeemPyToSy(
      caller?: string | null,
      receiver?: string | null,
      YT?: string | null,
      netPyIn?: null,
      netSyOut?: null
    ): RedeemPyToSyEventFilter;

    "RedeemPyToToken(address,address,address,address,uint256,uint256,uint256)"(
      caller?: string | null,
      tokenOut?: string | null,
      YT?: string | null,
      receiver?: null,
      netPyIn?: null,
      netTokenOut?: null,
      netSyInterm?: null
    ): RedeemPyToTokenEventFilter;
    RedeemPyToToken(
      caller?: string | null,
      tokenOut?: string | null,
      YT?: string | null,
      receiver?: null,
      netPyIn?: null,
      netTokenOut?: null,
      netSyInterm?: null
    ): RedeemPyToTokenEventFilter;

    "RedeemSyToToken(address,address,address,address,uint256,uint256)"(
      caller?: string | null,
      tokenOut?: string | null,
      SY?: string | null,
      receiver?: null,
      netSyIn?: null,
      netTokenOut?: null
    ): RedeemSyToTokenEventFilter;
    RedeemSyToToken(
      caller?: string | null,
      tokenOut?: string | null,
      SY?: string | null,
      receiver?: null,
      netSyIn?: null,
      netTokenOut?: null
    ): RedeemSyToTokenEventFilter;

    "RemoveLiquidityDualSyAndPt(address,address,address,uint256,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpToRemove?: null,
      netPtOut?: null,
      netSyOut?: null
    ): RemoveLiquidityDualSyAndPtEventFilter;
    RemoveLiquidityDualSyAndPt(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpToRemove?: null,
      netPtOut?: null,
      netSyOut?: null
    ): RemoveLiquidityDualSyAndPtEventFilter;

    "RemoveLiquidityDualTokenAndPt(address,address,address,address,uint256,uint256,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      tokenOut?: string | null,
      receiver?: null,
      netLpToRemove?: null,
      netPtOut?: null,
      netTokenOut?: null,
      netSyInterm?: null
    ): RemoveLiquidityDualTokenAndPtEventFilter;
    RemoveLiquidityDualTokenAndPt(
      caller?: string | null,
      market?: string | null,
      tokenOut?: string | null,
      receiver?: null,
      netLpToRemove?: null,
      netPtOut?: null,
      netTokenOut?: null,
      netSyInterm?: null
    ): RemoveLiquidityDualTokenAndPtEventFilter;

    "RemoveLiquiditySinglePt(address,address,address,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpToRemove?: null,
      netPtOut?: null
    ): RemoveLiquiditySinglePtEventFilter;
    RemoveLiquiditySinglePt(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpToRemove?: null,
      netPtOut?: null
    ): RemoveLiquiditySinglePtEventFilter;

    "RemoveLiquiditySingleSy(address,address,address,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpToRemove?: null,
      netSyOut?: null
    ): RemoveLiquiditySingleSyEventFilter;
    RemoveLiquiditySingleSy(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpToRemove?: null,
      netSyOut?: null
    ): RemoveLiquiditySingleSyEventFilter;

    "RemoveLiquiditySingleToken(address,address,address,address,uint256,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netLpToRemove?: null,
      netTokenOut?: null,
      netSyInterm?: null
    ): RemoveLiquiditySingleTokenEventFilter;
    RemoveLiquiditySingleToken(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netLpToRemove?: null,
      netTokenOut?: null,
      netSyInterm?: null
    ): RemoveLiquiditySingleTokenEventFilter;

    "SelectorToFacetSet(bytes4,address)"(
      selector?: BytesLike | null,
      facet?: string | null
    ): SelectorToFacetSetEventFilter;
    SelectorToFacetSet(
      selector?: BytesLike | null,
      facet?: string | null
    ): SelectorToFacetSetEventFilter;

    "SwapPtAndSy(address,address,address,int256,int256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netPtToAccount?: null,
      netSyToAccount?: null
    ): SwapPtAndSyEventFilter;
    SwapPtAndSy(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netPtToAccount?: null,
      netSyToAccount?: null
    ): SwapPtAndSyEventFilter;

    "SwapPtAndToken(address,address,address,address,int256,int256,uint256)"(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netPtToAccount?: null,
      netTokenToAccount?: null,
      netSyInterm?: null
    ): SwapPtAndTokenEventFilter;
    SwapPtAndToken(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netPtToAccount?: null,
      netTokenToAccount?: null,
      netSyInterm?: null
    ): SwapPtAndTokenEventFilter;

    "SwapYtAndSy(address,address,address,int256,int256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netYtToAccount?: null,
      netSyToAccount?: null
    ): SwapYtAndSyEventFilter;
    SwapYtAndSy(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netYtToAccount?: null,
      netSyToAccount?: null
    ): SwapYtAndSyEventFilter;

    "SwapYtAndToken(address,address,address,address,int256,int256,uint256)"(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netYtToAccount?: null,
      netTokenToAccount?: null,
      netSyInterm?: null
    ): SwapYtAndTokenEventFilter;
    SwapYtAndToken(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netYtToAccount?: null,
      netTokenToAccount?: null,
      netSyInterm?: null
    ): SwapYtAndTokenEventFilter;
  };

  estimateGas: {
    boostMarkets(
      markets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callAndReflect(
      reflector: string,
      selfCall1: BytesLike,
      selfCall2: BytesLike,
      reflectCall: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitPostExpToSy(
      receiver: string,
      market: string,
      netPtIn: BigNumberish,
      netLpIn: BigNumberish,
      minSyOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitPostExpToToken(
      receiver: string,
      market: string,
      netPtIn: BigNumberish,
      netLpIn: BigNumberish,
      output: TokenOutputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitPreExpToSy(
      receiver: string,
      market: string,
      netPtIn: BigNumberish,
      netYtIn: BigNumberish,
      netLpIn: BigNumberish,
      minSyOut: BigNumberish,
      limit: LimitOrderDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitPreExpToToken(
      receiver: string,
      market: string,
      netPtIn: BigNumberish,
      netYtIn: BigNumberish,
      netLpIn: BigNumberish,
      output: TokenOutputStruct,
      limit: LimitOrderDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPyFromSy(
      receiver: string,
      YT: string,
      netSyIn: BigNumberish,
      minPyOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPyFromToken(
      receiver: string,
      YT: string,
      minPyOut: BigNumberish,
      input: TokenInputStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintSyFromToken(
      receiver: string,
      SY: string,
      minSyOut: BigNumberish,
      input: TokenInputStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicall(
      calls: IPActionMiscV3.Call3Struct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemDueInterestAndRewards(
      user: string,
      sys: string[],
      yts: string[],
      markets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemDueInterestAndRewardsV2(
      SYs: string[],
      YTs: RedeemYtIncomeToTokenStructStruct[],
      markets: string[],
      pendleSwap: string,
      swaps: SwapDataExtraStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemPyToSy(
      receiver: string,
      YT: string,
      netPyIn: BigNumberish,
      minSyOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemPyToToken(
      receiver: string,
      YT: string,
      netPyIn: BigNumberish,
      output: TokenOutputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemSyToToken(
      receiver: string,
      SY: string,
      netSyIn: BigNumberish,
      output: TokenOutputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    simulate(
      target: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokenToTokenViaSy(
      receiver: string,
      SY: string,
      input: TokenInputStruct,
      tokenRedeemSy: string,
      minTokenOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokensToTokens(
      pendleSwap: string,
      swaps: SwapDataExtraStruct[],
      netSwaps: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    boostMarkets(
      markets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callAndReflect(
      reflector: string,
      selfCall1: BytesLike,
      selfCall2: BytesLike,
      reflectCall: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitPostExpToSy(
      receiver: string,
      market: string,
      netPtIn: BigNumberish,
      netLpIn: BigNumberish,
      minSyOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitPostExpToToken(
      receiver: string,
      market: string,
      netPtIn: BigNumberish,
      netLpIn: BigNumberish,
      output: TokenOutputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitPreExpToSy(
      receiver: string,
      market: string,
      netPtIn: BigNumberish,
      netYtIn: BigNumberish,
      netLpIn: BigNumberish,
      minSyOut: BigNumberish,
      limit: LimitOrderDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitPreExpToToken(
      receiver: string,
      market: string,
      netPtIn: BigNumberish,
      netYtIn: BigNumberish,
      netLpIn: BigNumberish,
      output: TokenOutputStruct,
      limit: LimitOrderDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPyFromSy(
      receiver: string,
      YT: string,
      netSyIn: BigNumberish,
      minPyOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPyFromToken(
      receiver: string,
      YT: string,
      minPyOut: BigNumberish,
      input: TokenInputStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintSyFromToken(
      receiver: string,
      SY: string,
      minSyOut: BigNumberish,
      input: TokenInputStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      calls: IPActionMiscV3.Call3Struct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemDueInterestAndRewards(
      user: string,
      sys: string[],
      yts: string[],
      markets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemDueInterestAndRewardsV2(
      SYs: string[],
      YTs: RedeemYtIncomeToTokenStructStruct[],
      markets: string[],
      pendleSwap: string,
      swaps: SwapDataExtraStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemPyToSy(
      receiver: string,
      YT: string,
      netPyIn: BigNumberish,
      minSyOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemPyToToken(
      receiver: string,
      YT: string,
      netPyIn: BigNumberish,
      output: TokenOutputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemSyToToken(
      receiver: string,
      SY: string,
      netSyIn: BigNumberish,
      output: TokenOutputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    simulate(
      target: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokenToTokenViaSy(
      receiver: string,
      SY: string,
      input: TokenInputStruct,
      tokenRedeemSy: string,
      minTokenOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensToTokens(
      pendleSwap: string,
      swaps: SwapDataExtraStruct[],
      netSwaps: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
