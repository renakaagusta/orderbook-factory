/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type ExitPostExpReturnParamsStruct = {
  netPtFromRemove: BigNumberish;
  netSyFromRemove: BigNumberish;
  netPtRedeem: BigNumberish;
  netSyFromRedeem: BigNumberish;
  totalSyOut: BigNumberish;
};

export type ExitPostExpReturnParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  netPtFromRemove: BigNumber;
  netSyFromRemove: BigNumber;
  netPtRedeem: BigNumber;
  netSyFromRedeem: BigNumber;
  totalSyOut: BigNumber;
};

export type ExitPreExpReturnParamsStruct = {
  netPtFromRemove: BigNumberish;
  netSyFromRemove: BigNumberish;
  netPyRedeem: BigNumberish;
  netSyFromRedeem: BigNumberish;
  netPtSwap: BigNumberish;
  netYtSwap: BigNumberish;
  netSyFromSwap: BigNumberish;
  netSyFee: BigNumberish;
  totalSyOut: BigNumberish;
};

export type ExitPreExpReturnParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  netPtFromRemove: BigNumber;
  netSyFromRemove: BigNumber;
  netPyRedeem: BigNumber;
  netSyFromRedeem: BigNumber;
  netPtSwap: BigNumber;
  netYtSwap: BigNumber;
  netSyFromSwap: BigNumber;
  netSyFee: BigNumber;
  totalSyOut: BigNumber;
};

export type ApproxParamsStruct = {
  guessMin: BigNumberish;
  guessMax: BigNumberish;
  guessOffchain: BigNumberish;
  maxIteration: BigNumberish;
  eps: BigNumberish;
};

export type ApproxParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  guessMin: BigNumber;
  guessMax: BigNumber;
  guessOffchain: BigNumber;
  maxIteration: BigNumber;
  eps: BigNumber;
};

export type MarketStateStruct = {
  totalPt: BigNumberish;
  totalSy: BigNumberish;
  totalLp: BigNumberish;
  treasury: string;
  scalarRoot: BigNumberish;
  expiry: BigNumberish;
  lnFeeRateRoot: BigNumberish;
  reserveFeePercent: BigNumberish;
  lastLnImpliedRate: BigNumberish;
};

export type MarketStateStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  totalPt: BigNumber;
  totalSy: BigNumber;
  totalLp: BigNumber;
  treasury: string;
  scalarRoot: BigNumber;
  expiry: BigNumber;
  lnFeeRateRoot: BigNumber;
  reserveFeePercent: BigNumber;
  lastLnImpliedRate: BigNumber;
};

export declare namespace IPActionInfoStatic {
  export type TokenAmountStruct = { token: string; amount: BigNumberish };

  export type TokenAmountStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type UserMarketInfoStruct = {
    lpBalance: IPActionInfoStatic.TokenAmountStruct;
    ptBalance: IPActionInfoStatic.TokenAmountStruct;
    syBalance: IPActionInfoStatic.TokenAmountStruct;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStruct[];
  };

  export type UserMarketInfoStructOutput = [
    IPActionInfoStatic.TokenAmountStructOutput,
    IPActionInfoStatic.TokenAmountStructOutput,
    IPActionInfoStatic.TokenAmountStructOutput,
    IPActionInfoStatic.TokenAmountStructOutput[]
  ] & {
    lpBalance: IPActionInfoStatic.TokenAmountStructOutput;
    ptBalance: IPActionInfoStatic.TokenAmountStructOutput;
    syBalance: IPActionInfoStatic.TokenAmountStructOutput;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStructOutput[];
  };

  export type UserPYInfoStruct = {
    ptBalance: IPActionInfoStatic.TokenAmountStruct;
    ytBalance: IPActionInfoStatic.TokenAmountStruct;
    unclaimedInterest: IPActionInfoStatic.TokenAmountStruct;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStruct[];
  };

  export type UserPYInfoStructOutput = [
    IPActionInfoStatic.TokenAmountStructOutput,
    IPActionInfoStatic.TokenAmountStructOutput,
    IPActionInfoStatic.TokenAmountStructOutput,
    IPActionInfoStatic.TokenAmountStructOutput[]
  ] & {
    ptBalance: IPActionInfoStatic.TokenAmountStructOutput;
    ytBalance: IPActionInfoStatic.TokenAmountStructOutput;
    unclaimedInterest: IPActionInfoStatic.TokenAmountStructOutput;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStructOutput[];
  };

  export type UserSYInfoStruct = {
    syBalance: IPActionInfoStatic.TokenAmountStruct;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStruct[];
  };

  export type UserSYInfoStructOutput = [
    IPActionInfoStatic.TokenAmountStructOutput,
    IPActionInfoStatic.TokenAmountStructOutput[]
  ] & {
    syBalance: IPActionInfoStatic.TokenAmountStructOutput;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStructOutput[];
  };
}

export declare namespace IPMiniDiamond {
  export type SelectorsToFacetStruct = {
    facet: string;
    selectors: BytesLike[];
  };

  export type SelectorsToFacetStructOutput = [string, string[]] & {
    facet: string;
    selectors: string[];
  };
}

export interface IPRouterStaticInterface extends utils.Interface {
  contractName: "IPRouterStatic";
  functions: {
    "addLiquidityDualSyAndPtStatic(address,uint256,uint256)": FunctionFragment;
    "addLiquidityDualTokenAndPtStatic(address,address,uint256,uint256)": FunctionFragment;
    "addLiquiditySinglePtStatic(address,uint256)": FunctionFragment;
    "addLiquiditySingleSyKeepYtStatic(address,uint256)": FunctionFragment;
    "addLiquiditySingleSyStatic(address,uint256)": FunctionFragment;
    "addLiquiditySingleTokenKeepYtStatic(address,address,uint256)": FunctionFragment;
    "addLiquiditySingleTokenStatic(address,address,uint256)": FunctionFragment;
    "calcPriceImpactPY(address,int256)": FunctionFragment;
    "calcPriceImpactPt(address,int256)": FunctionFragment;
    "calcPriceImpactYt(address,int256)": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "getAmountTokenToMintSy(address,address,uint256)": FunctionFragment;
    "getDefaultApproxParams()": FunctionFragment;
    "getLpToAssetRate(address)": FunctionFragment;
    "getLpToSyRate(address)": FunctionFragment;
    "getMarketState(address)": FunctionFragment;
    "getOwnerAndPendingOwner()": FunctionFragment;
    "getPY(address)": FunctionFragment;
    "getPtToAssetRate(address)": FunctionFragment;
    "getPtToSyRate(address)": FunctionFragment;
    "getTokensInOut(address)": FunctionFragment;
    "getTradeExchangeRateExcludeFee(address,(int256,int256,int256,address,int256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "getTradeExchangeRateIncludeFee(address,int256)": FunctionFragment;
    "getUserMarketInfo(address,address)": FunctionFragment;
    "getUserPYInfo(address,address)": FunctionFragment;
    "getUserSYInfo(address,address)": FunctionFragment;
    "getYieldTokenAndPtRate(address)": FunctionFragment;
    "getYieldTokenAndYtRate(address)": FunctionFragment;
    "getYtToAssetRate(address)": FunctionFragment;
    "getYtToSyRate(address)": FunctionFragment;
    "increaseLockPositionStatic(address,uint128,uint128)": FunctionFragment;
    "mintPyFromSyStatic(address,uint256)": FunctionFragment;
    "mintPyFromTokenStatic(address,address,uint256)": FunctionFragment;
    "mintSyFromTokenStatic(address,address,uint256)": FunctionFragment;
    "pyIndexCurrentViewMarket(address)": FunctionFragment;
    "pyIndexCurrentViewYt(address)": FunctionFragment;
    "readMarketState(address)": FunctionFragment;
    "redeemPyToSyStatic(address,uint256)": FunctionFragment;
    "redeemPyToTokenStatic(address,uint256,address)": FunctionFragment;
    "redeemSyToTokenStatic(address,address,uint256)": FunctionFragment;
    "removeLiquidityDualSyAndPtStatic(address,uint256)": FunctionFragment;
    "removeLiquidityDualTokenAndPtStatic(address,uint256,address)": FunctionFragment;
    "removeLiquiditySinglePtStatic(address,uint256)": FunctionFragment;
    "removeLiquiditySingleSyStatic(address,uint256)": FunctionFragment;
    "removeLiquiditySingleTokenStatic(address,uint256,address)": FunctionFragment;
    "setDefaultApproxParams((uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "setFacetForSelectors((address,bytes4[])[])": FunctionFragment;
    "swapExactPtForSyStatic(address,uint256)": FunctionFragment;
    "swapExactPtForTokenStatic(address,uint256,address)": FunctionFragment;
    "swapExactPtForYtStatic(address,uint256)": FunctionFragment;
    "swapExactSyForPtStatic(address,uint256)": FunctionFragment;
    "swapExactSyForPtStaticAndGenerateApproxParams(address,uint256,uint256)": FunctionFragment;
    "swapExactSyForYtStatic(address,uint256)": FunctionFragment;
    "swapExactTokenForPtStatic(address,address,uint256)": FunctionFragment;
    "swapExactTokenForPtStaticAndGenerateApproxParams(address,address,uint256,uint256)": FunctionFragment;
    "swapExactTokenForYtStatic(address,address,uint256)": FunctionFragment;
    "swapExactYtForPtStatic(address,uint256)": FunctionFragment;
    "swapExactYtForSyStatic(address,uint256)": FunctionFragment;
    "swapExactYtForTokenStatic(address,uint256,address)": FunctionFragment;
    "swapPtForExactSyStatic(address,uint256)": FunctionFragment;
    "swapSyForExactPtStatic(address,uint256)": FunctionFragment;
    "swapSyForExactYtStatic(address,uint256)": FunctionFragment;
    "swapYtForExactSyStatic(address,uint256)": FunctionFragment;
    "transferOwnership(address,bool,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidityDualSyAndPtStatic",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityDualTokenAndPtStatic",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySinglePtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleSyKeepYtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleSyStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleTokenKeepYtStatic",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleTokenStatic",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPriceImpactPY",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPriceImpactPt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPriceImpactYt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountTokenToMintSy",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultApproxParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLpToAssetRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpToSyRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerAndPendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPY", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPtToAssetRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPtToSyRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensInOut",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeExchangeRateExcludeFee",
    values: [string, MarketStateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeExchangeRateIncludeFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMarketInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPYInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSYInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldTokenAndPtRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldTokenAndYtRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getYtToAssetRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getYtToSyRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLockPositionStatic",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPyFromSyStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPyFromTokenStatic",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSyFromTokenStatic",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pyIndexCurrentViewMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pyIndexCurrentViewYt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "readMarketState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPyToSyStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPyToTokenStatic",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemSyToTokenStatic",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityDualSyAndPtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityDualTokenAndPtStatic",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySinglePtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySingleSyStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySingleTokenStatic",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultApproxParams",
    values: [ApproxParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setFacetForSelectors",
    values: [IPMiniDiamond.SelectorsToFacetStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForSyStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForTokenStatic",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForYtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactSyForPtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactSyForPtStaticAndGenerateApproxParams",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactSyForYtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForPtStatic",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForPtStaticAndGenerateApproxParams",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForYtStatic",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactYtForPtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactYtForSyStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactYtForTokenStatic",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPtForExactSyStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSyForExactPtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSyForExactYtStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapYtForExactSyStatic",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string, boolean, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidityDualSyAndPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityDualTokenAndPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySinglePtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleSyKeepYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleTokenKeepYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPriceImpactPY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPriceImpactPt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPriceImpactYt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountTokenToMintSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultApproxParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpToAssetRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpToSyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerAndPendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPtToAssetRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPtToSyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensInOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeExchangeRateExcludeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeExchangeRateIncludeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPYInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSYInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldTokenAndPtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldTokenAndYtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYtToAssetRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYtToSyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLockPositionStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPyFromSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPyFromTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintSyFromTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pyIndexCurrentViewMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pyIndexCurrentViewYt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readMarketState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPyToSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPyToTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemSyToTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityDualSyAndPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityDualTokenAndPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySinglePtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySingleSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySingleTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultApproxParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFacetForSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactSyForPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactSyForPtStaticAndGenerateApproxParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactSyForYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForPtStaticAndGenerateApproxParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactYtForPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactYtForSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactYtForTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPtForExactSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapSyForExactPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapSyForExactYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapYtForExactSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddLiquidityDualSyAndPt(address,address,address,uint256,uint256,uint256)": EventFragment;
    "AddLiquidityDualTokenAndPt(address,address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "AddLiquiditySinglePt(address,address,address,uint256,uint256)": EventFragment;
    "AddLiquiditySingleSy(address,address,address,uint256,uint256)": EventFragment;
    "AddLiquiditySingleSyKeepYt(address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "AddLiquiditySingleToken(address,address,address,address,uint256,uint256,uint256)": EventFragment;
    "AddLiquiditySingleTokenKeepYt(address,address,address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ExitPostExpToSy(address,address,address,uint256,tuple)": EventFragment;
    "ExitPostExpToToken(address,address,address,address,uint256,uint256,tuple)": EventFragment;
    "ExitPreExpToSy(address,address,address,uint256,tuple)": EventFragment;
    "ExitPreExpToToken(address,address,address,address,uint256,uint256,tuple)": EventFragment;
    "MintPyFromSy(address,address,address,uint256,uint256)": EventFragment;
    "MintPyFromToken(address,address,address,address,uint256,uint256,uint256)": EventFragment;
    "MintSyFromToken(address,address,address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RedeemPyToSy(address,address,address,uint256,uint256)": EventFragment;
    "RedeemPyToToken(address,address,address,address,uint256,uint256,uint256)": EventFragment;
    "RedeemSyToToken(address,address,address,address,uint256,uint256)": EventFragment;
    "RemoveLiquidityDualSyAndPt(address,address,address,uint256,uint256,uint256)": EventFragment;
    "RemoveLiquidityDualTokenAndPt(address,address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "RemoveLiquiditySinglePt(address,address,address,uint256,uint256)": EventFragment;
    "RemoveLiquiditySingleSy(address,address,address,uint256,uint256)": EventFragment;
    "RemoveLiquiditySingleToken(address,address,address,address,uint256,uint256,uint256)": EventFragment;
    "SelectorToFacetSet(bytes4,address)": EventFragment;
    "SwapPtAndSy(address,address,address,int256,int256)": EventFragment;
    "SwapPtAndToken(address,address,address,address,int256,int256,uint256)": EventFragment;
    "SwapYtAndSy(address,address,address,int256,int256)": EventFragment;
    "SwapYtAndToken(address,address,address,address,int256,int256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidityDualSyAndPt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquidityDualTokenAndPt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquiditySinglePt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquiditySingleSy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquiditySingleSyKeepYt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquiditySingleToken"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AddLiquiditySingleTokenKeepYt"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitPostExpToSy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitPostExpToToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitPreExpToSy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitPreExpToToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintPyFromSy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintPyFromToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintSyFromToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemPyToSy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemPyToToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemSyToToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityDualSyAndPt"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveLiquidityDualTokenAndPt"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquiditySinglePt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquiditySingleSy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquiditySingleToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SelectorToFacetSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapPtAndSy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapPtAndToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapYtAndSy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapYtAndToken"): EventFragment;
}

export type AddLiquidityDualSyAndPtEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netSyUsed: BigNumber;
    netPtUsed: BigNumber;
    netLpOut: BigNumber;
  }
>;

export type AddLiquidityDualSyAndPtEventFilter =
  TypedEventFilter<AddLiquidityDualSyAndPtEvent>;

export type AddLiquidityDualTokenAndPtEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    tokenIn: string;
    receiver: string;
    netTokenUsed: BigNumber;
    netPtUsed: BigNumber;
    netLpOut: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type AddLiquidityDualTokenAndPtEventFilter =
  TypedEventFilter<AddLiquidityDualTokenAndPtEvent>;

export type AddLiquiditySinglePtEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netPtIn: BigNumber;
    netLpOut: BigNumber;
  }
>;

export type AddLiquiditySinglePtEventFilter =
  TypedEventFilter<AddLiquiditySinglePtEvent>;

export type AddLiquiditySingleSyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netSyIn: BigNumber;
    netLpOut: BigNumber;
  }
>;

export type AddLiquiditySingleSyEventFilter =
  TypedEventFilter<AddLiquiditySingleSyEvent>;

export type AddLiquiditySingleSyKeepYtEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netSyIn: BigNumber;
    netSyMintPy: BigNumber;
    netLpOut: BigNumber;
    netYtOut: BigNumber;
  }
>;

export type AddLiquiditySingleSyKeepYtEventFilter =
  TypedEventFilter<AddLiquiditySingleSyKeepYtEvent>;

export type AddLiquiditySingleTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netTokenIn: BigNumber;
    netLpOut: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type AddLiquiditySingleTokenEventFilter =
  TypedEventFilter<AddLiquiditySingleTokenEvent>;

export type AddLiquiditySingleTokenKeepYtEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netTokenIn: BigNumber;
    netLpOut: BigNumber;
    netYtOut: BigNumber;
    netSyMintPy: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type AddLiquiditySingleTokenKeepYtEventFilter =
  TypedEventFilter<AddLiquiditySingleTokenKeepYtEvent>;

export type ExitPostExpToSyEvent = TypedEvent<
  [string, string, string, BigNumber, ExitPostExpReturnParamsStructOutput],
  {
    caller: string;
    market: string;
    receiver: string;
    netLpIn: BigNumber;
    params: ExitPostExpReturnParamsStructOutput;
  }
>;

export type ExitPostExpToSyEventFilter = TypedEventFilter<ExitPostExpToSyEvent>;

export type ExitPostExpToTokenEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    ExitPostExpReturnParamsStructOutput
  ],
  {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netLpIn: BigNumber;
    totalTokenOut: BigNumber;
    params: ExitPostExpReturnParamsStructOutput;
  }
>;

export type ExitPostExpToTokenEventFilter =
  TypedEventFilter<ExitPostExpToTokenEvent>;

export type ExitPreExpToSyEvent = TypedEvent<
  [string, string, string, BigNumber, ExitPreExpReturnParamsStructOutput],
  {
    caller: string;
    market: string;
    receiver: string;
    netLpIn: BigNumber;
    params: ExitPreExpReturnParamsStructOutput;
  }
>;

export type ExitPreExpToSyEventFilter = TypedEventFilter<ExitPreExpToSyEvent>;

export type ExitPreExpToTokenEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    ExitPreExpReturnParamsStructOutput
  ],
  {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netLpIn: BigNumber;
    totalTokenOut: BigNumber;
    params: ExitPreExpReturnParamsStructOutput;
  }
>;

export type ExitPreExpToTokenEventFilter =
  TypedEventFilter<ExitPreExpToTokenEvent>;

export type MintPyFromSyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    receiver: string;
    YT: string;
    netSyIn: BigNumber;
    netPyOut: BigNumber;
  }
>;

export type MintPyFromSyEventFilter = TypedEventFilter<MintPyFromSyEvent>;

export type MintPyFromTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    tokenIn: string;
    YT: string;
    receiver: string;
    netTokenIn: BigNumber;
    netPyOut: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type MintPyFromTokenEventFilter = TypedEventFilter<MintPyFromTokenEvent>;

export type MintSyFromTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    tokenIn: string;
    SY: string;
    receiver: string;
    netTokenIn: BigNumber;
    netSyOut: BigNumber;
  }
>;

export type MintSyFromTokenEventFilter = TypedEventFilter<MintSyFromTokenEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RedeemPyToSyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    receiver: string;
    YT: string;
    netPyIn: BigNumber;
    netSyOut: BigNumber;
  }
>;

export type RedeemPyToSyEventFilter = TypedEventFilter<RedeemPyToSyEvent>;

export type RedeemPyToTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    tokenOut: string;
    YT: string;
    receiver: string;
    netPyIn: BigNumber;
    netTokenOut: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type RedeemPyToTokenEventFilter = TypedEventFilter<RedeemPyToTokenEvent>;

export type RedeemSyToTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    tokenOut: string;
    SY: string;
    receiver: string;
    netSyIn: BigNumber;
    netTokenOut: BigNumber;
  }
>;

export type RedeemSyToTokenEventFilter = TypedEventFilter<RedeemSyToTokenEvent>;

export type RemoveLiquidityDualSyAndPtEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netLpToRemove: BigNumber;
    netPtOut: BigNumber;
    netSyOut: BigNumber;
  }
>;

export type RemoveLiquidityDualSyAndPtEventFilter =
  TypedEventFilter<RemoveLiquidityDualSyAndPtEvent>;

export type RemoveLiquidityDualTokenAndPtEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    tokenOut: string;
    receiver: string;
    netLpToRemove: BigNumber;
    netPtOut: BigNumber;
    netTokenOut: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type RemoveLiquidityDualTokenAndPtEventFilter =
  TypedEventFilter<RemoveLiquidityDualTokenAndPtEvent>;

export type RemoveLiquiditySinglePtEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netLpToRemove: BigNumber;
    netPtOut: BigNumber;
  }
>;

export type RemoveLiquiditySinglePtEventFilter =
  TypedEventFilter<RemoveLiquiditySinglePtEvent>;

export type RemoveLiquiditySingleSyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netLpToRemove: BigNumber;
    netSyOut: BigNumber;
  }
>;

export type RemoveLiquiditySingleSyEventFilter =
  TypedEventFilter<RemoveLiquiditySingleSyEvent>;

export type RemoveLiquiditySingleTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netLpToRemove: BigNumber;
    netTokenOut: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type RemoveLiquiditySingleTokenEventFilter =
  TypedEventFilter<RemoveLiquiditySingleTokenEvent>;

export type SelectorToFacetSetEvent = TypedEvent<
  [string, string],
  { selector: string; facet: string }
>;

export type SelectorToFacetSetEventFilter =
  TypedEventFilter<SelectorToFacetSetEvent>;

export type SwapPtAndSyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netPtToAccount: BigNumber;
    netSyToAccount: BigNumber;
  }
>;

export type SwapPtAndSyEventFilter = TypedEventFilter<SwapPtAndSyEvent>;

export type SwapPtAndTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netPtToAccount: BigNumber;
    netTokenToAccount: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type SwapPtAndTokenEventFilter = TypedEventFilter<SwapPtAndTokenEvent>;

export type SwapYtAndSyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    receiver: string;
    netYtToAccount: BigNumber;
    netSyToAccount: BigNumber;
  }
>;

export type SwapYtAndSyEventFilter = TypedEventFilter<SwapYtAndSyEvent>;

export type SwapYtAndTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netYtToAccount: BigNumber;
    netTokenToAccount: BigNumber;
    netSyInterm: BigNumber;
  }
>;

export type SwapYtAndTokenEventFilter = TypedEventFilter<SwapYtAndTokenEvent>;

export interface IPRouterStatic extends BaseContract {
  contractName: "IPRouterStatic";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPRouterStaticInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidityDualSyAndPtStatic(
      market: string,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netSyUsed: BigNumber;
        netPtUsed: BigNumber;
      }
    >;

    addLiquidityDualTokenAndPtStatic(
      market: string,
      tokenIn: string,
      netTokenDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netTokenUsed: BigNumber;
        netPtUsed: BigNumber;
        netSyUsed: BigNumber;
        netSyDesired: BigNumber;
      }
    >;

    addLiquiditySinglePtStatic(
      market: string,
      netPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netPtToSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyFromSwap: BigNumber;
      }
    >;

    addLiquiditySingleSyKeepYtStatic(
      market: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netYtOut: BigNumber;
        netSyToPY: BigNumber;
      }
    >;

    addLiquiditySingleSyStatic(
      market: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netPtFromSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyToSwap: BigNumber;
      }
    >;

    addLiquiditySingleTokenKeepYtStatic(
      market: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netYtOut: BigNumber;
        netSyMinted: BigNumber;
        netSyToPY: BigNumber;
      }
    >;

    addLiquiditySingleTokenStatic(
      market: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netLpOut: BigNumber;
        netPtFromSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyMinted: BigNumber;
        netSyToSwap: BigNumber;
      }
    >;

    calcPriceImpactPY(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcPriceImpactPt(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcPriceImpactYt(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAmountTokenToMintSy(
      SY: string,
      tokenIn: string,
      netSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netTokenIn: BigNumber }>;

    getDefaultApproxParams(
      overrides?: CallOverrides
    ): Promise<[ApproxParamsStructOutput]>;

    getLpToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLpToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarketState(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        MarketStateStructOutput
      ] & {
        pt: string;
        yt: string;
        sy: string;
        impliedYield: BigNumber;
        marketExchangeRateExcludeFee: BigNumber;
        state: MarketStateStructOutput;
      }
    >;

    getOwnerAndPendingOwner(
      overrides?: CallOverrides
    ): Promise<[string, string] & { _owner: string; _pendingOwner: string }>;

    getPY(
      py: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { pt: string; yt: string }>;

    getPtToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPtToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokensInOut(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { tokensIn: string[]; tokensOut: string[] }
    >;

    getTradeExchangeRateExcludeFee(
      market: string,
      state: MarketStateStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTradeExchangeRateIncludeFee(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserMarketInfo(
      market: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserPYInfo(
      py: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserSYInfo(
      sy: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getYieldTokenAndPtRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        yieldToken: string;
        netPtOut: BigNumber;
        netYieldTokenOut: BigNumber;
      }
    >;

    getYieldTokenAndYtRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        yieldToken: string;
        netYtOut: BigNumber;
        netYieldTokenOut: BigNumber;
      }
    >;

    getYtToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getYtToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseLockPositionStatic(
      user: string,
      additionalAmountToLock: BigNumberish,
      newExpiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { newVeBalance: BigNumber }>;

    mintPyFromSyStatic(
      YT: string,
      netSyToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netPYOut: BigNumber }>;

    mintPyFromTokenStatic(
      YT: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netPyOut: BigNumber }>;

    mintSyFromTokenStatic(
      SY: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netSyOut: BigNumber }>;

    pyIndexCurrentViewMarket(
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pyIndexCurrentViewYt(
      yt: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    readMarketState(
      market: string,
      overrides?: CallOverrides
    ): Promise<[MarketStateStructOutput]>;

    redeemPyToSyStatic(
      YT: string,
      netPYToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netSyOut: BigNumber }>;

    redeemPyToTokenStatic(
      YT: string,
      netPYToRedeem: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netTokenOut: BigNumber }>;

    redeemSyToTokenStatic(
      SY: string,
      tokenOut: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netTokenOut: BigNumber }>;

    removeLiquidityDualSyAndPtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { netSyOut: BigNumber; netPtOut: BigNumber }
    >;

    removeLiquidityDualTokenAndPtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netTokenOut: BigNumber;
        netPtOut: BigNumber;
        netSyToRedeem: BigNumber;
      }
    >;

    removeLiquiditySinglePtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netPtOut: BigNumber;
        netPtFromSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyFromBurn: BigNumber;
        netPtFromBurn: BigNumber;
      }
    >;

    removeLiquiditySingleSyStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netSyOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyFromBurn: BigNumber;
        netPtFromBurn: BigNumber;
        netSyFromSwap: BigNumber;
      }
    >;

    removeLiquiditySingleTokenStatic(
      market: string,
      netLpToRemove: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netTokenOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyOut: BigNumber;
        netSyFromBurn: BigNumber;
        netPtFromBurn: BigNumber;
        netSyFromSwap: BigNumber;
      }
    >;

    setDefaultApproxParams(
      params: ApproxParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFacetForSelectors(
      arr: IPMiniDiamond.SelectorsToFacetStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactPtForSyStatic(
      market: string,
      exactPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netSyOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactPtForTokenStatic(
      market: string,
      exactPtIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netTokenOut: BigNumber;
        netSyToRedeem: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactPtForYtStatic(
      market: string,
      exactPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netYtOut: BigNumber;
        totalPtToSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactSyForPtStatic(
      market: string,
      exactSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netPtOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactSyForPtStaticAndGenerateApproxParams(
      market: string,
      exactSyIn: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, ApproxParamsStructOutput] & {
        netPtOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        approxParams: ApproxParamsStructOutput;
      }
    >;

    swapExactSyForYtStatic(
      market: string,
      exactSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netYtOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactTokenForPtStatic(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netPtOut: BigNumber;
        netSyMinted: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactTokenForPtStaticAndGenerateApproxParams(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ApproxParamsStructOutput
      ] & {
        netPtOut: BigNumber;
        netSyMinted: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        approxParams: ApproxParamsStructOutput;
      }
    >;

    swapExactTokenForYtStatic(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netYtOut: BigNumber;
        netSyMinted: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactYtForPtStatic(
      market: string,
      exactYtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netPtOut: BigNumber;
        totalPtSwapped: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactYtForSyStatic(
      market: string,
      exactYtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netSyOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyOwedInt: BigNumber;
        netPYToRepaySyOwedInt: BigNumber;
        netPYToRedeemSyOutInt: BigNumber;
      }
    >;

    swapExactYtForTokenStatic(
      market: string,
      exactYtIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netTokenOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyOut: BigNumber;
        netSyOwedInt: BigNumber;
        netPYToRepaySyOwedInt: BigNumber;
        netPYToRedeemSyOutInt: BigNumber;
      }
    >;

    swapPtForExactSyStatic(
      market: string,
      exactSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netPtIn: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapSyForExactPtStatic(
      market: string,
      exactPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netSyIn: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapSyForExactYtStatic(
      market: string,
      exactYtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netSyIn: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyReceivedInt: BigNumber;
        totalSyNeedInt: BigNumber;
      }
    >;

    swapYtForExactSyStatic(
      market: string,
      exactSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netYtIn: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidityDualSyAndPtStatic(
    market: string,
    netSyDesired: BigNumberish,
    netPtDesired: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      netLpOut: BigNumber;
      netSyUsed: BigNumber;
      netPtUsed: BigNumber;
    }
  >;

  addLiquidityDualTokenAndPtStatic(
    market: string,
    tokenIn: string,
    netTokenDesired: BigNumberish,
    netPtDesired: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netLpOut: BigNumber;
      netTokenUsed: BigNumber;
      netPtUsed: BigNumber;
      netSyUsed: BigNumber;
      netSyDesired: BigNumber;
    }
  >;

  addLiquiditySinglePtStatic(
    market: string,
    netPtIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netLpOut: BigNumber;
      netPtToSwap: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyFromSwap: BigNumber;
    }
  >;

  addLiquiditySingleSyKeepYtStatic(
    market: string,
    netSyIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      netLpOut: BigNumber;
      netYtOut: BigNumber;
      netSyToPY: BigNumber;
    }
  >;

  addLiquiditySingleSyStatic(
    market: string,
    netSyIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netLpOut: BigNumber;
      netPtFromSwap: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyToSwap: BigNumber;
    }
  >;

  addLiquiditySingleTokenKeepYtStatic(
    market: string,
    tokenIn: string,
    netTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      netLpOut: BigNumber;
      netYtOut: BigNumber;
      netSyMinted: BigNumber;
      netSyToPY: BigNumber;
    }
  >;

  addLiquiditySingleTokenStatic(
    market: string,
    tokenIn: string,
    netTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      netLpOut: BigNumber;
      netPtFromSwap: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyMinted: BigNumber;
      netSyToSwap: BigNumber;
    }
  >;

  calcPriceImpactPY(
    market: string,
    netPtOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcPriceImpactPt(
    market: string,
    netPtOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcPriceImpactYt(
    market: string,
    netPtOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(selector: BytesLike, overrides?: CallOverrides): Promise<string>;

  getAmountTokenToMintSy(
    SY: string,
    tokenIn: string,
    netSyOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDefaultApproxParams(
    overrides?: CallOverrides
  ): Promise<ApproxParamsStructOutput>;

  getLpToAssetRate(
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLpToSyRate(market: string, overrides?: CallOverrides): Promise<BigNumber>;

  getMarketState(
    market: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, MarketStateStructOutput] & {
      pt: string;
      yt: string;
      sy: string;
      impliedYield: BigNumber;
      marketExchangeRateExcludeFee: BigNumber;
      state: MarketStateStructOutput;
    }
  >;

  getOwnerAndPendingOwner(
    overrides?: CallOverrides
  ): Promise<[string, string] & { _owner: string; _pendingOwner: string }>;

  getPY(
    py: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { pt: string; yt: string }>;

  getPtToAssetRate(
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPtToSyRate(market: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTokensInOut(
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[]] & { tokensIn: string[]; tokensOut: string[] }
  >;

  getTradeExchangeRateExcludeFee(
    market: string,
    state: MarketStateStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradeExchangeRateIncludeFee(
    market: string,
    netPtOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserMarketInfo(
    market: string,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserPYInfo(
    py: string,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserSYInfo(
    sy: string,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getYieldTokenAndPtRate(
    market: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      yieldToken: string;
      netPtOut: BigNumber;
      netYieldTokenOut: BigNumber;
    }
  >;

  getYieldTokenAndYtRate(
    market: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      yieldToken: string;
      netYtOut: BigNumber;
      netYieldTokenOut: BigNumber;
    }
  >;

  getYtToAssetRate(
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getYtToSyRate(market: string, overrides?: CallOverrides): Promise<BigNumber>;

  increaseLockPositionStatic(
    user: string,
    additionalAmountToLock: BigNumberish,
    newExpiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintPyFromSyStatic(
    YT: string,
    netSyToMint: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintPyFromTokenStatic(
    YT: string,
    tokenIn: string,
    netTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintSyFromTokenStatic(
    SY: string,
    tokenIn: string,
    netTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pyIndexCurrentViewMarket(
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pyIndexCurrentViewYt(
    yt: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  readMarketState(
    market: string,
    overrides?: CallOverrides
  ): Promise<MarketStateStructOutput>;

  redeemPyToSyStatic(
    YT: string,
    netPYToRedeem: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeemPyToTokenStatic(
    YT: string,
    netPYToRedeem: BigNumberish,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeemSyToTokenStatic(
    SY: string,
    tokenOut: string,
    netSyIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeLiquidityDualSyAndPtStatic(
    market: string,
    netLpToRemove: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { netSyOut: BigNumber; netPtOut: BigNumber }
  >;

  removeLiquidityDualTokenAndPtStatic(
    market: string,
    netLpToRemove: BigNumberish,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      netTokenOut: BigNumber;
      netPtOut: BigNumber;
      netSyToRedeem: BigNumber;
    }
  >;

  removeLiquiditySinglePtStatic(
    market: string,
    netLpToRemove: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      netPtOut: BigNumber;
      netPtFromSwap: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyFromBurn: BigNumber;
      netPtFromBurn: BigNumber;
    }
  >;

  removeLiquiditySingleSyStatic(
    market: string,
    netLpToRemove: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      netSyOut: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyFromBurn: BigNumber;
      netPtFromBurn: BigNumber;
      netSyFromSwap: BigNumber;
    }
  >;

  removeLiquiditySingleTokenStatic(
    market: string,
    netLpToRemove: BigNumberish,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      netTokenOut: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyOut: BigNumber;
      netSyFromBurn: BigNumber;
      netPtFromBurn: BigNumber;
      netSyFromSwap: BigNumber;
    }
  >;

  setDefaultApproxParams(
    params: ApproxParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFacetForSelectors(
    arr: IPMiniDiamond.SelectorsToFacetStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactPtForSyStatic(
    market: string,
    exactPtIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      netSyOut: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapExactPtForTokenStatic(
    market: string,
    exactPtIn: BigNumberish,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netTokenOut: BigNumber;
      netSyToRedeem: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapExactPtForYtStatic(
    market: string,
    exactPtIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netYtOut: BigNumber;
      totalPtToSwap: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapExactSyForPtStatic(
    market: string,
    exactSyIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      netPtOut: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapExactSyForPtStaticAndGenerateApproxParams(
    market: string,
    exactSyIn: BigNumberish,
    slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, ApproxParamsStructOutput] & {
      netPtOut: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      approxParams: ApproxParamsStructOutput;
    }
  >;

  swapExactSyForYtStatic(
    market: string,
    exactSyIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      netYtOut: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapExactTokenForPtStatic(
    market: string,
    tokenIn: string,
    amountTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netPtOut: BigNumber;
      netSyMinted: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapExactTokenForPtStaticAndGenerateApproxParams(
    market: string,
    tokenIn: string,
    amountTokenIn: BigNumberish,
    slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      ApproxParamsStructOutput
    ] & {
      netPtOut: BigNumber;
      netSyMinted: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      approxParams: ApproxParamsStructOutput;
    }
  >;

  swapExactTokenForYtStatic(
    market: string,
    tokenIn: string,
    amountTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netYtOut: BigNumber;
      netSyMinted: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapExactYtForPtStatic(
    market: string,
    exactYtIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netPtOut: BigNumber;
      totalPtSwapped: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapExactYtForSyStatic(
    market: string,
    exactYtIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      netSyOut: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyOwedInt: BigNumber;
      netPYToRepaySyOwedInt: BigNumber;
      netPYToRedeemSyOutInt: BigNumber;
    }
  >;

  swapExactYtForTokenStatic(
    market: string,
    exactYtIn: BigNumberish,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      netTokenOut: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyOut: BigNumber;
      netSyOwedInt: BigNumber;
      netPYToRepaySyOwedInt: BigNumber;
      netPYToRedeemSyOutInt: BigNumber;
    }
  >;

  swapPtForExactSyStatic(
    market: string,
    exactSyOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      netPtIn: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapSyForExactPtStatic(
    market: string,
    exactPtOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      netSyIn: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  swapSyForExactYtStatic(
    market: string,
    exactYtOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      netSyIn: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
      netSyReceivedInt: BigNumber;
      totalSyNeedInt: BigNumber;
    }
  >;

  swapYtForExactSyStatic(
    market: string,
    exactSyOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      netYtIn: BigNumber;
      netSyFee: BigNumber;
      priceImpact: BigNumber;
      exchangeRateAfter: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: string,
    direct: boolean,
    renounce: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidityDualSyAndPtStatic(
      market: string,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netSyUsed: BigNumber;
        netPtUsed: BigNumber;
      }
    >;

    addLiquidityDualTokenAndPtStatic(
      market: string,
      tokenIn: string,
      netTokenDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netTokenUsed: BigNumber;
        netPtUsed: BigNumber;
        netSyUsed: BigNumber;
        netSyDesired: BigNumber;
      }
    >;

    addLiquiditySinglePtStatic(
      market: string,
      netPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netPtToSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyFromSwap: BigNumber;
      }
    >;

    addLiquiditySingleSyKeepYtStatic(
      market: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netYtOut: BigNumber;
        netSyToPY: BigNumber;
      }
    >;

    addLiquiditySingleSyStatic(
      market: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netPtFromSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyToSwap: BigNumber;
      }
    >;

    addLiquiditySingleTokenKeepYtStatic(
      market: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netYtOut: BigNumber;
        netSyMinted: BigNumber;
        netSyToPY: BigNumber;
      }
    >;

    addLiquiditySingleTokenStatic(
      market: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netLpOut: BigNumber;
        netPtFromSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyMinted: BigNumber;
        netSyToSwap: BigNumber;
      }
    >;

    calcPriceImpactPY(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPriceImpactPt(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPriceImpactYt(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getAmountTokenToMintSy(
      SY: string,
      tokenIn: string,
      netSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultApproxParams(
      overrides?: CallOverrides
    ): Promise<ApproxParamsStructOutput>;

    getLpToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketState(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        MarketStateStructOutput
      ] & {
        pt: string;
        yt: string;
        sy: string;
        impliedYield: BigNumber;
        marketExchangeRateExcludeFee: BigNumber;
        state: MarketStateStructOutput;
      }
    >;

    getOwnerAndPendingOwner(
      overrides?: CallOverrides
    ): Promise<[string, string] & { _owner: string; _pendingOwner: string }>;

    getPY(
      py: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { pt: string; yt: string }>;

    getPtToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPtToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensInOut(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { tokensIn: string[]; tokensOut: string[] }
    >;

    getTradeExchangeRateExcludeFee(
      market: string,
      state: MarketStateStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeExchangeRateIncludeFee(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserMarketInfo(
      market: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<IPActionInfoStatic.UserMarketInfoStructOutput>;

    getUserPYInfo(
      py: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<IPActionInfoStatic.UserPYInfoStructOutput>;

    getUserSYInfo(
      sy: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<IPActionInfoStatic.UserSYInfoStructOutput>;

    getYieldTokenAndPtRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        yieldToken: string;
        netPtOut: BigNumber;
        netYieldTokenOut: BigNumber;
      }
    >;

    getYieldTokenAndYtRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        yieldToken: string;
        netYtOut: BigNumber;
        netYieldTokenOut: BigNumber;
      }
    >;

    getYtToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYtToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLockPositionStatic(
      user: string,
      additionalAmountToLock: BigNumberish,
      newExpiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintPyFromSyStatic(
      YT: string,
      netSyToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintPyFromTokenStatic(
      YT: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintSyFromTokenStatic(
      SY: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pyIndexCurrentViewMarket(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pyIndexCurrentViewYt(
      yt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readMarketState(
      market: string,
      overrides?: CallOverrides
    ): Promise<MarketStateStructOutput>;

    redeemPyToSyStatic(
      YT: string,
      netPYToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemPyToTokenStatic(
      YT: string,
      netPYToRedeem: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemSyToTokenStatic(
      SY: string,
      tokenOut: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityDualSyAndPtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { netSyOut: BigNumber; netPtOut: BigNumber }
    >;

    removeLiquidityDualTokenAndPtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netTokenOut: BigNumber;
        netPtOut: BigNumber;
        netSyToRedeem: BigNumber;
      }
    >;

    removeLiquiditySinglePtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netPtOut: BigNumber;
        netPtFromSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyFromBurn: BigNumber;
        netPtFromBurn: BigNumber;
      }
    >;

    removeLiquiditySingleSyStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netSyOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyFromBurn: BigNumber;
        netPtFromBurn: BigNumber;
        netSyFromSwap: BigNumber;
      }
    >;

    removeLiquiditySingleTokenStatic(
      market: string,
      netLpToRemove: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netTokenOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyOut: BigNumber;
        netSyFromBurn: BigNumber;
        netPtFromBurn: BigNumber;
        netSyFromSwap: BigNumber;
      }
    >;

    setDefaultApproxParams(
      params: ApproxParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setFacetForSelectors(
      arr: IPMiniDiamond.SelectorsToFacetStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactPtForSyStatic(
      market: string,
      exactPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netSyOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactPtForTokenStatic(
      market: string,
      exactPtIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netTokenOut: BigNumber;
        netSyToRedeem: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactPtForYtStatic(
      market: string,
      exactPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netYtOut: BigNumber;
        totalPtToSwap: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactSyForPtStatic(
      market: string,
      exactSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netPtOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactSyForPtStaticAndGenerateApproxParams(
      market: string,
      exactSyIn: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, ApproxParamsStructOutput] & {
        netPtOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        approxParams: ApproxParamsStructOutput;
      }
    >;

    swapExactSyForYtStatic(
      market: string,
      exactSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netYtOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactTokenForPtStatic(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netPtOut: BigNumber;
        netSyMinted: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactTokenForPtStaticAndGenerateApproxParams(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ApproxParamsStructOutput
      ] & {
        netPtOut: BigNumber;
        netSyMinted: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        approxParams: ApproxParamsStructOutput;
      }
    >;

    swapExactTokenForYtStatic(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netYtOut: BigNumber;
        netSyMinted: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactYtForPtStatic(
      market: string,
      exactYtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netPtOut: BigNumber;
        totalPtSwapped: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapExactYtForSyStatic(
      market: string,
      exactYtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netSyOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyOwedInt: BigNumber;
        netPYToRepaySyOwedInt: BigNumber;
        netPYToRedeemSyOutInt: BigNumber;
      }
    >;

    swapExactYtForTokenStatic(
      market: string,
      exactYtIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        netTokenOut: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyOut: BigNumber;
        netSyOwedInt: BigNumber;
        netPYToRepaySyOwedInt: BigNumber;
        netPYToRedeemSyOutInt: BigNumber;
      }
    >;

    swapPtForExactSyStatic(
      market: string,
      exactSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netPtIn: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapSyForExactPtStatic(
      market: string,
      exactPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netSyIn: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    swapSyForExactYtStatic(
      market: string,
      exactYtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        netSyIn: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
        netSyReceivedInt: BigNumber;
        totalSyNeedInt: BigNumber;
      }
    >;

    swapYtForExactSyStatic(
      market: string,
      exactSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        netYtIn: BigNumber;
        netSyFee: BigNumber;
        priceImpact: BigNumber;
        exchangeRateAfter: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddLiquidityDualSyAndPt(address,address,address,uint256,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netSyUsed?: null,
      netPtUsed?: null,
      netLpOut?: null
    ): AddLiquidityDualSyAndPtEventFilter;
    AddLiquidityDualSyAndPt(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netSyUsed?: null,
      netPtUsed?: null,
      netLpOut?: null
    ): AddLiquidityDualSyAndPtEventFilter;

    "AddLiquidityDualTokenAndPt(address,address,address,address,uint256,uint256,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      tokenIn?: string | null,
      receiver?: null,
      netTokenUsed?: null,
      netPtUsed?: null,
      netLpOut?: null,
      netSyInterm?: null
    ): AddLiquidityDualTokenAndPtEventFilter;
    AddLiquidityDualTokenAndPt(
      caller?: string | null,
      market?: string | null,
      tokenIn?: string | null,
      receiver?: null,
      netTokenUsed?: null,
      netPtUsed?: null,
      netLpOut?: null,
      netSyInterm?: null
    ): AddLiquidityDualTokenAndPtEventFilter;

    "AddLiquiditySinglePt(address,address,address,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netPtIn?: null,
      netLpOut?: null
    ): AddLiquiditySinglePtEventFilter;
    AddLiquiditySinglePt(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netPtIn?: null,
      netLpOut?: null
    ): AddLiquiditySinglePtEventFilter;

    "AddLiquiditySingleSy(address,address,address,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netSyIn?: null,
      netLpOut?: null
    ): AddLiquiditySingleSyEventFilter;
    AddLiquiditySingleSy(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netSyIn?: null,
      netLpOut?: null
    ): AddLiquiditySingleSyEventFilter;

    "AddLiquiditySingleSyKeepYt(address,address,address,uint256,uint256,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netSyIn?: null,
      netSyMintPy?: null,
      netLpOut?: null,
      netYtOut?: null
    ): AddLiquiditySingleSyKeepYtEventFilter;
    AddLiquiditySingleSyKeepYt(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netSyIn?: null,
      netSyMintPy?: null,
      netLpOut?: null,
      netYtOut?: null
    ): AddLiquiditySingleSyKeepYtEventFilter;

    "AddLiquiditySingleToken(address,address,address,address,uint256,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netTokenIn?: null,
      netLpOut?: null,
      netSyInterm?: null
    ): AddLiquiditySingleTokenEventFilter;
    AddLiquiditySingleToken(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netTokenIn?: null,
      netLpOut?: null,
      netSyInterm?: null
    ): AddLiquiditySingleTokenEventFilter;

    "AddLiquiditySingleTokenKeepYt(address,address,address,address,uint256,uint256,uint256,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netTokenIn?: null,
      netLpOut?: null,
      netYtOut?: null,
      netSyMintPy?: null,
      netSyInterm?: null
    ): AddLiquiditySingleTokenKeepYtEventFilter;
    AddLiquiditySingleTokenKeepYt(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netTokenIn?: null,
      netLpOut?: null,
      netYtOut?: null,
      netSyMintPy?: null,
      netSyInterm?: null
    ): AddLiquiditySingleTokenKeepYtEventFilter;

    "ExitPostExpToSy(address,address,address,uint256,tuple)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpIn?: null,
      params?: null
    ): ExitPostExpToSyEventFilter;
    ExitPostExpToSy(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpIn?: null,
      params?: null
    ): ExitPostExpToSyEventFilter;

    "ExitPostExpToToken(address,address,address,address,uint256,uint256,tuple)"(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netLpIn?: null,
      totalTokenOut?: null,
      params?: null
    ): ExitPostExpToTokenEventFilter;
    ExitPostExpToToken(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netLpIn?: null,
      totalTokenOut?: null,
      params?: null
    ): ExitPostExpToTokenEventFilter;

    "ExitPreExpToSy(address,address,address,uint256,tuple)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpIn?: null,
      params?: null
    ): ExitPreExpToSyEventFilter;
    ExitPreExpToSy(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpIn?: null,
      params?: null
    ): ExitPreExpToSyEventFilter;

    "ExitPreExpToToken(address,address,address,address,uint256,uint256,tuple)"(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netLpIn?: null,
      totalTokenOut?: null,
      params?: null
    ): ExitPreExpToTokenEventFilter;
    ExitPreExpToToken(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netLpIn?: null,
      totalTokenOut?: null,
      params?: null
    ): ExitPreExpToTokenEventFilter;

    "MintPyFromSy(address,address,address,uint256,uint256)"(
      caller?: string | null,
      receiver?: string | null,
      YT?: string | null,
      netSyIn?: null,
      netPyOut?: null
    ): MintPyFromSyEventFilter;
    MintPyFromSy(
      caller?: string | null,
      receiver?: string | null,
      YT?: string | null,
      netSyIn?: null,
      netPyOut?: null
    ): MintPyFromSyEventFilter;

    "MintPyFromToken(address,address,address,address,uint256,uint256,uint256)"(
      caller?: string | null,
      tokenIn?: string | null,
      YT?: string | null,
      receiver?: null,
      netTokenIn?: null,
      netPyOut?: null,
      netSyInterm?: null
    ): MintPyFromTokenEventFilter;
    MintPyFromToken(
      caller?: string | null,
      tokenIn?: string | null,
      YT?: string | null,
      receiver?: null,
      netTokenIn?: null,
      netPyOut?: null,
      netSyInterm?: null
    ): MintPyFromTokenEventFilter;

    "MintSyFromToken(address,address,address,address,uint256,uint256)"(
      caller?: string | null,
      tokenIn?: string | null,
      SY?: string | null,
      receiver?: null,
      netTokenIn?: null,
      netSyOut?: null
    ): MintSyFromTokenEventFilter;
    MintSyFromToken(
      caller?: string | null,
      tokenIn?: string | null,
      SY?: string | null,
      receiver?: null,
      netTokenIn?: null,
      netSyOut?: null
    ): MintSyFromTokenEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RedeemPyToSy(address,address,address,uint256,uint256)"(
      caller?: string | null,
      receiver?: string | null,
      YT?: string | null,
      netPyIn?: null,
      netSyOut?: null
    ): RedeemPyToSyEventFilter;
    RedeemPyToSy(
      caller?: string | null,
      receiver?: string | null,
      YT?: string | null,
      netPyIn?: null,
      netSyOut?: null
    ): RedeemPyToSyEventFilter;

    "RedeemPyToToken(address,address,address,address,uint256,uint256,uint256)"(
      caller?: string | null,
      tokenOut?: string | null,
      YT?: string | null,
      receiver?: null,
      netPyIn?: null,
      netTokenOut?: null,
      netSyInterm?: null
    ): RedeemPyToTokenEventFilter;
    RedeemPyToToken(
      caller?: string | null,
      tokenOut?: string | null,
      YT?: string | null,
      receiver?: null,
      netPyIn?: null,
      netTokenOut?: null,
      netSyInterm?: null
    ): RedeemPyToTokenEventFilter;

    "RedeemSyToToken(address,address,address,address,uint256,uint256)"(
      caller?: string | null,
      tokenOut?: string | null,
      SY?: string | null,
      receiver?: null,
      netSyIn?: null,
      netTokenOut?: null
    ): RedeemSyToTokenEventFilter;
    RedeemSyToToken(
      caller?: string | null,
      tokenOut?: string | null,
      SY?: string | null,
      receiver?: null,
      netSyIn?: null,
      netTokenOut?: null
    ): RedeemSyToTokenEventFilter;

    "RemoveLiquidityDualSyAndPt(address,address,address,uint256,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpToRemove?: null,
      netPtOut?: null,
      netSyOut?: null
    ): RemoveLiquidityDualSyAndPtEventFilter;
    RemoveLiquidityDualSyAndPt(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpToRemove?: null,
      netPtOut?: null,
      netSyOut?: null
    ): RemoveLiquidityDualSyAndPtEventFilter;

    "RemoveLiquidityDualTokenAndPt(address,address,address,address,uint256,uint256,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      tokenOut?: string | null,
      receiver?: null,
      netLpToRemove?: null,
      netPtOut?: null,
      netTokenOut?: null,
      netSyInterm?: null
    ): RemoveLiquidityDualTokenAndPtEventFilter;
    RemoveLiquidityDualTokenAndPt(
      caller?: string | null,
      market?: string | null,
      tokenOut?: string | null,
      receiver?: null,
      netLpToRemove?: null,
      netPtOut?: null,
      netTokenOut?: null,
      netSyInterm?: null
    ): RemoveLiquidityDualTokenAndPtEventFilter;

    "RemoveLiquiditySinglePt(address,address,address,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpToRemove?: null,
      netPtOut?: null
    ): RemoveLiquiditySinglePtEventFilter;
    RemoveLiquiditySinglePt(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpToRemove?: null,
      netPtOut?: null
    ): RemoveLiquiditySinglePtEventFilter;

    "RemoveLiquiditySingleSy(address,address,address,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpToRemove?: null,
      netSyOut?: null
    ): RemoveLiquiditySingleSyEventFilter;
    RemoveLiquiditySingleSy(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netLpToRemove?: null,
      netSyOut?: null
    ): RemoveLiquiditySingleSyEventFilter;

    "RemoveLiquiditySingleToken(address,address,address,address,uint256,uint256,uint256)"(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netLpToRemove?: null,
      netTokenOut?: null,
      netSyInterm?: null
    ): RemoveLiquiditySingleTokenEventFilter;
    RemoveLiquiditySingleToken(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netLpToRemove?: null,
      netTokenOut?: null,
      netSyInterm?: null
    ): RemoveLiquiditySingleTokenEventFilter;

    "SelectorToFacetSet(bytes4,address)"(
      selector?: BytesLike | null,
      facet?: string | null
    ): SelectorToFacetSetEventFilter;
    SelectorToFacetSet(
      selector?: BytesLike | null,
      facet?: string | null
    ): SelectorToFacetSetEventFilter;

    "SwapPtAndSy(address,address,address,int256,int256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netPtToAccount?: null,
      netSyToAccount?: null
    ): SwapPtAndSyEventFilter;
    SwapPtAndSy(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netPtToAccount?: null,
      netSyToAccount?: null
    ): SwapPtAndSyEventFilter;

    "SwapPtAndToken(address,address,address,address,int256,int256,uint256)"(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netPtToAccount?: null,
      netTokenToAccount?: null,
      netSyInterm?: null
    ): SwapPtAndTokenEventFilter;
    SwapPtAndToken(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netPtToAccount?: null,
      netTokenToAccount?: null,
      netSyInterm?: null
    ): SwapPtAndTokenEventFilter;

    "SwapYtAndSy(address,address,address,int256,int256)"(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netYtToAccount?: null,
      netSyToAccount?: null
    ): SwapYtAndSyEventFilter;
    SwapYtAndSy(
      caller?: string | null,
      market?: string | null,
      receiver?: string | null,
      netYtToAccount?: null,
      netSyToAccount?: null
    ): SwapYtAndSyEventFilter;

    "SwapYtAndToken(address,address,address,address,int256,int256,uint256)"(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netYtToAccount?: null,
      netTokenToAccount?: null,
      netSyInterm?: null
    ): SwapYtAndTokenEventFilter;
    SwapYtAndToken(
      caller?: string | null,
      market?: string | null,
      token?: string | null,
      receiver?: null,
      netYtToAccount?: null,
      netTokenToAccount?: null,
      netSyInterm?: null
    ): SwapYtAndTokenEventFilter;
  };

  estimateGas: {
    addLiquidityDualSyAndPtStatic(
      market: string,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityDualTokenAndPtStatic(
      market: string,
      tokenIn: string,
      netTokenDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquiditySinglePtStatic(
      market: string,
      netPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquiditySingleSyKeepYtStatic(
      market: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquiditySingleSyStatic(
      market: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquiditySingleTokenKeepYtStatic(
      market: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquiditySingleTokenStatic(
      market: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPriceImpactPY(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPriceImpactPt(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPriceImpactYt(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountTokenToMintSy(
      SY: string,
      tokenIn: string,
      netSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultApproxParams(overrides?: CallOverrides): Promise<BigNumber>;

    getLpToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketState(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerAndPendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getPY(py: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPtToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPtToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensInOut(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeExchangeRateExcludeFee(
      market: string,
      state: MarketStateStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeExchangeRateIncludeFee(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserMarketInfo(
      market: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserPYInfo(
      py: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserSYInfo(
      sy: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getYieldTokenAndPtRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYieldTokenAndYtRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYtToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYtToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLockPositionStatic(
      user: string,
      additionalAmountToLock: BigNumberish,
      newExpiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintPyFromSyStatic(
      YT: string,
      netSyToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintPyFromTokenStatic(
      YT: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintSyFromTokenStatic(
      SY: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pyIndexCurrentViewMarket(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pyIndexCurrentViewYt(
      yt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readMarketState(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemPyToSyStatic(
      YT: string,
      netPYToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemPyToTokenStatic(
      YT: string,
      netPYToRedeem: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemSyToTokenStatic(
      SY: string,
      tokenOut: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityDualSyAndPtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityDualTokenAndPtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquiditySinglePtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquiditySingleSyStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquiditySingleTokenStatic(
      market: string,
      netLpToRemove: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDefaultApproxParams(
      params: ApproxParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFacetForSelectors(
      arr: IPMiniDiamond.SelectorsToFacetStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactPtForSyStatic(
      market: string,
      exactPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactPtForTokenStatic(
      market: string,
      exactPtIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactPtForYtStatic(
      market: string,
      exactPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactSyForPtStatic(
      market: string,
      exactSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactSyForPtStaticAndGenerateApproxParams(
      market: string,
      exactSyIn: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactSyForYtStatic(
      market: string,
      exactSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactTokenForPtStatic(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactTokenForPtStaticAndGenerateApproxParams(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactTokenForYtStatic(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactYtForPtStatic(
      market: string,
      exactYtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactYtForSyStatic(
      market: string,
      exactYtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactYtForTokenStatic(
      market: string,
      exactYtIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapPtForExactSyStatic(
      market: string,
      exactSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapSyForExactPtStatic(
      market: string,
      exactPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapSyForExactYtStatic(
      market: string,
      exactYtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapYtForExactSyStatic(
      market: string,
      exactSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidityDualSyAndPtStatic(
      market: string,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidityDualTokenAndPtStatic(
      market: string,
      tokenIn: string,
      netTokenDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquiditySinglePtStatic(
      market: string,
      netPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquiditySingleSyKeepYtStatic(
      market: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquiditySingleSyStatic(
      market: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquiditySingleTokenKeepYtStatic(
      market: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquiditySingleTokenStatic(
      market: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPriceImpactPY(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPriceImpactPt(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPriceImpactYt(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountTokenToMintSy(
      SY: string,
      tokenIn: string,
      netSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultApproxParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLpToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLpToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketState(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerAndPendingOwner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPY(py: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPtToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPtToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensInOut(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeExchangeRateExcludeFee(
      market: string,
      state: MarketStateStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeExchangeRateIncludeFee(
      market: string,
      netPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserMarketInfo(
      market: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserPYInfo(
      py: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserSYInfo(
      sy: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getYieldTokenAndPtRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYieldTokenAndYtRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYtToAssetRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYtToSyRate(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseLockPositionStatic(
      user: string,
      additionalAmountToLock: BigNumberish,
      newExpiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintPyFromSyStatic(
      YT: string,
      netSyToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintPyFromTokenStatic(
      YT: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintSyFromTokenStatic(
      SY: string,
      tokenIn: string,
      netTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pyIndexCurrentViewMarket(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pyIndexCurrentViewYt(
      yt: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readMarketState(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemPyToSyStatic(
      YT: string,
      netPYToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemPyToTokenStatic(
      YT: string,
      netPYToRedeem: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemSyToTokenStatic(
      SY: string,
      tokenOut: string,
      netSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityDualSyAndPtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityDualTokenAndPtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquiditySinglePtStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquiditySingleSyStatic(
      market: string,
      netLpToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquiditySingleTokenStatic(
      market: string,
      netLpToRemove: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDefaultApproxParams(
      params: ApproxParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFacetForSelectors(
      arr: IPMiniDiamond.SelectorsToFacetStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactPtForSyStatic(
      market: string,
      exactPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactPtForTokenStatic(
      market: string,
      exactPtIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactPtForYtStatic(
      market: string,
      exactPtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactSyForPtStatic(
      market: string,
      exactSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactSyForPtStaticAndGenerateApproxParams(
      market: string,
      exactSyIn: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactSyForYtStatic(
      market: string,
      exactSyIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactTokenForPtStatic(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactTokenForPtStaticAndGenerateApproxParams(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactTokenForYtStatic(
      market: string,
      tokenIn: string,
      amountTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactYtForPtStatic(
      market: string,
      exactYtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactYtForSyStatic(
      market: string,
      exactYtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactYtForTokenStatic(
      market: string,
      exactYtIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapPtForExactSyStatic(
      market: string,
      exactSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapSyForExactPtStatic(
      market: string,
      exactPtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapSyForExactYtStatic(
      market: string,
      exactYtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapYtForExactSyStatic(
      market: string,
      exactSyOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
