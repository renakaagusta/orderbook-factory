/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IOdosRouterV2, IOdosRouterV2Interface } from "../IOdosRouterV2";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "inputToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "inputAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "inputReceiver",
            type: "address",
          },
          {
            internalType: "address",
            name: "outputToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "outputQuote",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "outputMin",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "outputReceiver",
            type: "address",
          },
        ],
        internalType: "struct IOdosRouterV2.swapTokenInfo",
        name: "tokenInfo",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "pathDefinition",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "executor",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "referralCode",
        type: "uint32",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

export class IOdosRouterV2__factory {
  static readonly abi = _abi;
  static createInterface(): IOdosRouterV2Interface {
    return new utils.Interface(_abi) as IOdosRouterV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IOdosRouterV2 {
    return new Contract(address, _abi, signerOrProvider) as IOdosRouterV2;
  }
}
