/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace PendlePoolDeployHelper {
  export type PoolDeploymentParamsStruct = {
    expiry: BigNumberish;
    lnFeeRateRoot: BigNumberish;
    scalarRoot: BigNumberish;
    initialRateAnchor: BigNumberish;
    doCacheIndexSameBlock: boolean;
  };

  export type PoolDeploymentParamsStructOutput = [
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    expiry: number;
    lnFeeRateRoot: BigNumber;
    scalarRoot: BigNumber;
    initialRateAnchor: BigNumber;
    doCacheIndexSameBlock: boolean;
  };
}

export interface PendlePoolDeployHelperInterface extends utils.Interface {
  contractName: "PendlePoolDeployHelper";
  functions: {
    "deploy5115MarketAndSeedLiquidity(address,(uint32,uint80,int256,int256,bool),address,uint256)": FunctionFragment;
    "marketFactory()": FunctionFragment;
    "redeployMarket(address,uint256,uint80,int256,int256)": FunctionFragment;
    "router()": FunctionFragment;
    "seedLiquidity(address,address,uint256)": FunctionFragment;
    "yieldContractFactory()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deploy5115MarketAndSeedLiquidity",
    values: [
      string,
      PendlePoolDeployHelper.PoolDeploymentParamsStruct,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "marketFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeployMarket",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "seedLiquidity",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldContractFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "deploy5115MarketAndSeedLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeployMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seedLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldContractFactory",
    data: BytesLike
  ): Result;

  events: {
    "MarketDeployment(address,address,address,address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketDeployment"): EventFragment;
}

export type MarketDeploymentEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    PendlePoolDeployHelper.PoolDeploymentParamsStructOutput
  ],
  {
    market: string;
    SY: string;
    PT: string;
    YT: string;
    params: PendlePoolDeployHelper.PoolDeploymentParamsStructOutput;
  }
>;

export type MarketDeploymentEventFilter =
  TypedEventFilter<MarketDeploymentEvent>;

export interface PendlePoolDeployHelper extends BaseContract {
  contractName: "PendlePoolDeployHelper";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PendlePoolDeployHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy5115MarketAndSeedLiquidity(
      SY: string,
      params: PendlePoolDeployHelper.PoolDeploymentParamsStruct,
      tokenToSeedLiqudity: string,
      amountToSeed: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketFactory(overrides?: CallOverrides): Promise<[string]>;

    redeployMarket(
      oldMarket: string,
      amountLp: BigNumberish,
      lnFeeRateRoot: BigNumberish,
      scalarRoot: BigNumberish,
      initialRateAnchor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    seedLiquidity(
      market: string,
      tokenToSeedLiqudity: string,
      amountToSeed: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yieldContractFactory(overrides?: CallOverrides): Promise<[string]>;
  };

  deploy5115MarketAndSeedLiquidity(
    SY: string,
    params: PendlePoolDeployHelper.PoolDeploymentParamsStruct,
    tokenToSeedLiqudity: string,
    amountToSeed: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketFactory(overrides?: CallOverrides): Promise<string>;

  redeployMarket(
    oldMarket: string,
    amountLp: BigNumberish,
    lnFeeRateRoot: BigNumberish,
    scalarRoot: BigNumberish,
    initialRateAnchor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  seedLiquidity(
    market: string,
    tokenToSeedLiqudity: string,
    amountToSeed: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yieldContractFactory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deploy5115MarketAndSeedLiquidity(
      SY: string,
      params: PendlePoolDeployHelper.PoolDeploymentParamsStruct,
      tokenToSeedLiqudity: string,
      amountToSeed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & { PT: string; YT: string; market: string }
    >;

    marketFactory(overrides?: CallOverrides): Promise<string>;

    redeployMarket(
      oldMarket: string,
      amountLp: BigNumberish,
      lnFeeRateRoot: BigNumberish,
      scalarRoot: BigNumberish,
      initialRateAnchor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    seedLiquidity(
      market: string,
      tokenToSeedLiqudity: string,
      amountToSeed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    yieldContractFactory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "MarketDeployment(address,address,address,address,tuple)"(
      market?: string | null,
      SY?: null,
      PT?: null,
      YT?: null,
      params?: null
    ): MarketDeploymentEventFilter;
    MarketDeployment(
      market?: string | null,
      SY?: null,
      PT?: null,
      YT?: null,
      params?: null
    ): MarketDeploymentEventFilter;
  };

  estimateGas: {
    deploy5115MarketAndSeedLiquidity(
      SY: string,
      params: PendlePoolDeployHelper.PoolDeploymentParamsStruct,
      tokenToSeedLiqudity: string,
      amountToSeed: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketFactory(overrides?: CallOverrides): Promise<BigNumber>;

    redeployMarket(
      oldMarket: string,
      amountLp: BigNumberish,
      lnFeeRateRoot: BigNumberish,
      scalarRoot: BigNumberish,
      initialRateAnchor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    seedLiquidity(
      market: string,
      tokenToSeedLiqudity: string,
      amountToSeed: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yieldContractFactory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy5115MarketAndSeedLiquidity(
      SY: string,
      params: PendlePoolDeployHelper.PoolDeploymentParamsStruct,
      tokenToSeedLiqudity: string,
      amountToSeed: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeployMarket(
      oldMarket: string,
      amountLp: BigNumberish,
      lnFeeRateRoot: BigNumberish,
      scalarRoot: BigNumberish,
      initialRateAnchor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seedLiquidity(
      market: string,
      tokenToSeedLiqudity: string,
      amountToSeed: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yieldContractFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
