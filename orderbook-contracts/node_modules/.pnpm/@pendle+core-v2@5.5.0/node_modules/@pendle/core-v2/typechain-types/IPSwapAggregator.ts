/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type SwapDataStruct = {
  swapType: BigNumberish;
  extRouter: string;
  extCalldata: BytesLike;
  needScale: boolean;
};

export type SwapDataStructOutput = [number, string, string, boolean] & {
  swapType: number;
  extRouter: string;
  extCalldata: string;
  needScale: boolean;
};

export interface IPSwapAggregatorInterface extends utils.Interface {
  contractName: "IPSwapAggregator";
  functions: {
    "swap(address,uint256,(uint8,address,bytes,bool))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "swap",
    values: [string, BigNumberish, SwapDataStruct]
  ): string;

  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {
    "SwapSingle(uint8,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SwapSingle"): EventFragment;
}

export type SwapSingleEvent = TypedEvent<
  [number, string, BigNumber],
  { swapType: number; tokenIn: string; amountIn: BigNumber }
>;

export type SwapSingleEventFilter = TypedEventFilter<SwapSingleEvent>;

export interface IPSwapAggregator extends BaseContract {
  contractName: "IPSwapAggregator";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPSwapAggregatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    swap(
      tokenIn: string,
      amountIn: BigNumberish,
      swapData: SwapDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  swap(
    tokenIn: string,
    amountIn: BigNumberish,
    swapData: SwapDataStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    swap(
      tokenIn: string,
      amountIn: BigNumberish,
      swapData: SwapDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SwapSingle(uint8,address,uint256)"(
      swapType?: BigNumberish | null,
      tokenIn?: string | null,
      amountIn?: null
    ): SwapSingleEventFilter;
    SwapSingle(
      swapType?: BigNumberish | null,
      tokenIn?: string | null,
      amountIn?: null
    ): SwapSingleEventFilter;
  };

  estimateGas: {
    swap(
      tokenIn: string,
      amountIn: BigNumberish,
      swapData: SwapDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    swap(
      tokenIn: string,
      amountIn: BigNumberish,
      swapData: SwapDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
