/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IOdosRouterV2 {
  export type SwapTokenInfoStruct = {
    inputToken: string;
    inputAmount: BigNumberish;
    inputReceiver: string;
    outputToken: string;
    outputQuote: BigNumberish;
    outputMin: BigNumberish;
    outputReceiver: string;
  };

  export type SwapTokenInfoStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    inputToken: string;
    inputAmount: BigNumber;
    inputReceiver: string;
    outputToken: string;
    outputQuote: BigNumber;
    outputMin: BigNumber;
    outputReceiver: string;
  };
}

export interface IOdosRouterV2Interface extends utils.Interface {
  contractName: "IOdosRouterV2";
  functions: {
    "swap((address,uint256,address,address,uint256,uint256,address),bytes,address,uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "swap",
    values: [IOdosRouterV2.SwapTokenInfoStruct, BytesLike, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export interface IOdosRouterV2 extends BaseContract {
  contractName: "IOdosRouterV2";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOdosRouterV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    swap(
      tokenInfo: IOdosRouterV2.SwapTokenInfoStruct,
      pathDefinition: BytesLike,
      executor: string,
      referralCode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  swap(
    tokenInfo: IOdosRouterV2.SwapTokenInfoStruct,
    pathDefinition: BytesLike,
    executor: string,
    referralCode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    swap(
      tokenInfo: IOdosRouterV2.SwapTokenInfoStruct,
      pathDefinition: BytesLike,
      executor: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    swap(
      tokenInfo: IOdosRouterV2.SwapTokenInfoStruct,
      pathDefinition: BytesLike,
      executor: string,
      referralCode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    swap(
      tokenInfo: IOdosRouterV2.SwapTokenInfoStruct,
      pathDefinition: BytesLike,
      executor: string,
      referralCode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
