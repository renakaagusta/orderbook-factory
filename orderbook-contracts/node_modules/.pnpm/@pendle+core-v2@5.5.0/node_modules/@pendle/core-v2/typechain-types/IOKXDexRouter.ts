/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IOKXDexRouter {
  export type BaseRequestStruct = {
    fromToken: BigNumberish;
    toToken: string;
    fromTokenAmount: BigNumberish;
    minReturnAmount: BigNumberish;
    deadLine: BigNumberish;
  };

  export type BaseRequestStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    fromToken: BigNumber;
    toToken: string;
    fromTokenAmount: BigNumber;
    minReturnAmount: BigNumber;
    deadLine: BigNumber;
  };

  export type RouterPathStruct = {
    mixAdapters: string[];
    assetTo: string[];
    rawData: BigNumberish[];
    extraData: BytesLike[];
    fromToken: BigNumberish;
  };

  export type RouterPathStructOutput = [
    string[],
    string[],
    BigNumber[],
    string[],
    BigNumber
  ] & {
    mixAdapters: string[];
    assetTo: string[];
    rawData: BigNumber[];
    extraData: string[];
    fromToken: BigNumber;
  };

  export type PMMSwapRequestStruct = {
    pathIndex: BigNumberish;
    payer: string;
    fromToken: string;
    toToken: string;
    fromTokenAmountMax: BigNumberish;
    toTokenAmountMax: BigNumberish;
    salt: BigNumberish;
    deadLine: BigNumberish;
    isPushOrder: boolean;
    extension: BytesLike;
  };

  export type PMMSwapRequestStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string
  ] & {
    pathIndex: BigNumber;
    payer: string;
    fromToken: string;
    toToken: string;
    fromTokenAmountMax: BigNumber;
    toTokenAmountMax: BigNumber;
    salt: BigNumber;
    deadLine: BigNumber;
    isPushOrder: boolean;
    extension: string;
  };
}

export interface IOKXDexRouterInterface extends utils.Interface {
  contractName: "IOKXDexRouter";
  functions: {
    "smartSwapByOrderId(uint256,(uint256,address,uint256,uint256,uint256),uint256[],(address[],address[],uint256[],bytes[],uint256)[][],(uint256,address,address,address,uint256,uint256,uint256,uint256,bool,bytes)[])": FunctionFragment;
    "smartSwapTo(uint256,address,(uint256,address,uint256,uint256,uint256),uint256[],(address[],address[],uint256[],bytes[],uint256)[][],(uint256,address,address,address,uint256,uint256,uint256,uint256,bool,bytes)[])": FunctionFragment;
    "uniswapV3SwapTo(uint256,uint256,uint256,uint256[])": FunctionFragment;
    "unxswapByOrderId(uint256,uint256,uint256,bytes32[])": FunctionFragment;
    "unxswapTo(uint256,uint256,uint256,address,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "smartSwapByOrderId",
    values: [
      BigNumberish,
      IOKXDexRouter.BaseRequestStruct,
      BigNumberish[],
      IOKXDexRouter.RouterPathStruct[],
      IOKXDexRouter.PMMSwapRequestStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "smartSwapTo",
    values: [
      BigNumberish,
      string,
      IOKXDexRouter.BaseRequestStruct,
      BigNumberish[],
      IOKXDexRouter.RouterPathStruct[],
      IOKXDexRouter.PMMSwapRequestStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapTo",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unxswapByOrderId",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unxswapTo",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "smartSwapByOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "smartSwapTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unxswapByOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unxswapTo", data: BytesLike): Result;

  events: {};
}

export interface IOKXDexRouter extends BaseContract {
  contractName: "IOKXDexRouter";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOKXDexRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    smartSwapByOrderId(
      orderId: BigNumberish,
      baseRequest: IOKXDexRouter.BaseRequestStruct,
      batchesAmount: BigNumberish[],
      batches: IOKXDexRouter.RouterPathStruct[],
      extraData: IOKXDexRouter.PMMSwapRequestStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    smartSwapTo(
      orderId: BigNumberish,
      receiver: string,
      baseRequest: IOKXDexRouter.BaseRequestStruct,
      batchesAmount: BigNumberish[],
      batches: IOKXDexRouter.RouterPathStruct[],
      extraData: IOKXDexRouter.PMMSwapRequestStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapTo(
      receiver: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unxswapByOrderId(
      srcToken: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unxswapTo(
      srcToken: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      receiver: string,
      pools: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  smartSwapByOrderId(
    orderId: BigNumberish,
    baseRequest: IOKXDexRouter.BaseRequestStruct,
    batchesAmount: BigNumberish[],
    batches: IOKXDexRouter.RouterPathStruct[],
    extraData: IOKXDexRouter.PMMSwapRequestStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  smartSwapTo(
    orderId: BigNumberish,
    receiver: string,
    baseRequest: IOKXDexRouter.BaseRequestStruct,
    batchesAmount: BigNumberish[],
    batches: IOKXDexRouter.RouterPathStruct[],
    extraData: IOKXDexRouter.PMMSwapRequestStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapTo(
    receiver: BigNumberish,
    amount: BigNumberish,
    minReturn: BigNumberish,
    pools: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unxswapByOrderId(
    srcToken: BigNumberish,
    amount: BigNumberish,
    minReturn: BigNumberish,
    pools: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unxswapTo(
    srcToken: BigNumberish,
    amount: BigNumberish,
    minReturn: BigNumberish,
    receiver: string,
    pools: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    smartSwapByOrderId(
      orderId: BigNumberish,
      baseRequest: IOKXDexRouter.BaseRequestStruct,
      batchesAmount: BigNumberish[],
      batches: IOKXDexRouter.RouterPathStruct[],
      extraData: IOKXDexRouter.PMMSwapRequestStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    smartSwapTo(
      orderId: BigNumberish,
      receiver: string,
      baseRequest: IOKXDexRouter.BaseRequestStruct,
      batchesAmount: BigNumberish[],
      batches: IOKXDexRouter.RouterPathStruct[],
      extraData: IOKXDexRouter.PMMSwapRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3SwapTo(
      receiver: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unxswapByOrderId(
      srcToken: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unxswapTo(
      srcToken: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      receiver: string,
      pools: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    smartSwapByOrderId(
      orderId: BigNumberish,
      baseRequest: IOKXDexRouter.BaseRequestStruct,
      batchesAmount: BigNumberish[],
      batches: IOKXDexRouter.RouterPathStruct[],
      extraData: IOKXDexRouter.PMMSwapRequestStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    smartSwapTo(
      orderId: BigNumberish,
      receiver: string,
      baseRequest: IOKXDexRouter.BaseRequestStruct,
      batchesAmount: BigNumberish[],
      batches: IOKXDexRouter.RouterPathStruct[],
      extraData: IOKXDexRouter.PMMSwapRequestStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapTo(
      receiver: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unxswapByOrderId(
      srcToken: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unxswapTo(
      srcToken: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      receiver: string,
      pools: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    smartSwapByOrderId(
      orderId: BigNumberish,
      baseRequest: IOKXDexRouter.BaseRequestStruct,
      batchesAmount: BigNumberish[],
      batches: IOKXDexRouter.RouterPathStruct[],
      extraData: IOKXDexRouter.PMMSwapRequestStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    smartSwapTo(
      orderId: BigNumberish,
      receiver: string,
      baseRequest: IOKXDexRouter.BaseRequestStruct,
      batchesAmount: BigNumberish[],
      batches: IOKXDexRouter.RouterPathStruct[],
      extraData: IOKXDexRouter.PMMSwapRequestStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapTo(
      receiver: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unxswapByOrderId(
      srcToken: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unxswapTo(
      srcToken: BigNumberish,
      amount: BigNumberish,
      minReturn: BigNumberish,
      receiver: string,
      pools: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
