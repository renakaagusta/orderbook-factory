/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IPActionMarketAuxStatic,
  IPActionMarketAuxStaticInterface,
} from "../IPActionMarketAuxStatic";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        internalType: "int256",
        name: "netPtOut",
        type: "int256",
      },
    ],
    name: "calcPriceImpactPY",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        internalType: "int256",
        name: "netPtOut",
        type: "int256",
      },
    ],
    name: "calcPriceImpactPt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        internalType: "int256",
        name: "netPtOut",
        type: "int256",
      },
    ],
    name: "calcPriceImpactYt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "getLpToAssetRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "getLpToSyRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "getMarketState",
    outputs: [
      {
        internalType: "address",
        name: "pt",
        type: "address",
      },
      {
        internalType: "address",
        name: "yt",
        type: "address",
      },
      {
        internalType: "address",
        name: "sy",
        type: "address",
      },
      {
        internalType: "int256",
        name: "impliedYield",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "marketExchangeRateExcludeFee",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "totalPt",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "totalSy",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "totalLp",
            type: "int256",
          },
          {
            internalType: "address",
            name: "treasury",
            type: "address",
          },
          {
            internalType: "int256",
            name: "scalarRoot",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lnFeeRateRoot",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reserveFeePercent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastLnImpliedRate",
            type: "uint256",
          },
        ],
        internalType: "struct MarketState",
        name: "state",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "getPtToAssetRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "getPtToSyRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "totalPt",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "totalSy",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "totalLp",
            type: "int256",
          },
          {
            internalType: "address",
            name: "treasury",
            type: "address",
          },
          {
            internalType: "int256",
            name: "scalarRoot",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lnFeeRateRoot",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reserveFeePercent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastLnImpliedRate",
            type: "uint256",
          },
        ],
        internalType: "struct MarketState",
        name: "state",
        type: "tuple",
      },
    ],
    name: "getTradeExchangeRateExcludeFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        internalType: "int256",
        name: "netPtOut",
        type: "int256",
      },
    ],
    name: "getTradeExchangeRateIncludeFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "getYieldTokenAndPtRate",
    outputs: [
      {
        internalType: "address",
        name: "yieldToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "netPtOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netYieldTokenOut",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "getYieldTokenAndYtRate",
    outputs: [
      {
        internalType: "address",
        name: "yieldToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "netYtOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netYieldTokenOut",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "getYtToAssetRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "getYtToSyRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "exactSyIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "slippage",
        type: "uint256",
      },
    ],
    name: "swapExactSyForPtStaticAndGenerateApproxParams",
    outputs: [
      {
        internalType: "uint256",
        name: "netPtOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netSyFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "priceImpact",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "exchangeRateAfter",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "guessMin",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "guessMax",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "guessOffchain",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxIteration",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "eps",
            type: "uint256",
          },
        ],
        internalType: "struct ApproxParams",
        name: "approxParams",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountTokenIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "slippage",
        type: "uint256",
      },
    ],
    name: "swapExactTokenForPtStaticAndGenerateApproxParams",
    outputs: [
      {
        internalType: "uint256",
        name: "netPtOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netSyMinted",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netSyFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "priceImpact",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "exchangeRateAfter",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "guessMin",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "guessMax",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "guessOffchain",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxIteration",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "eps",
            type: "uint256",
          },
        ],
        internalType: "struct ApproxParams",
        name: "approxParams",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IPActionMarketAuxStatic__factory {
  static readonly abi = _abi;
  static createInterface(): IPActionMarketAuxStaticInterface {
    return new utils.Interface(_abi) as IPActionMarketAuxStaticInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPActionMarketAuxStatic {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IPActionMarketAuxStatic;
  }
}
