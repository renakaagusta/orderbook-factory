/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IPSwapAggregator,
  IPSwapAggregatorInterface,
} from "../IPSwapAggregator";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum SwapType",
        name: "swapType",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "SwapSingle",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "enum SwapType",
            name: "swapType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "extRouter",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extCalldata",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "needScale",
            type: "bool",
          },
        ],
        internalType: "struct SwapData",
        name: "swapData",
        type: "tuple",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

export class IPSwapAggregator__factory {
  static readonly abi = _abi;
  static createInterface(): IPSwapAggregatorInterface {
    return new utils.Interface(_abi) as IPSwapAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPSwapAggregator {
    return new Contract(address, _abi, signerOrProvider) as IPSwapAggregator;
  }
}
